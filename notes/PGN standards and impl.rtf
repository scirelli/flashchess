{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fcharset0 Arial;}}
{\*\generator Msftedit 5.41.15.1507;}\viewkind4\uc1\pard\f0\fs20 CC Help: PGN-spec\par
\par
Standard: Portable Game Notation Specification and Implementation Guide\par
\par
Revised: 1994.03.12\par
\par
Authors: Interested readers of the Internet newsgroup rec.games.chess\par
\par
Coordinator: Steven J. Edwards (send comments to sje@world.std.com)\par
\par
0: Preface\par
\par
From the Tower of Babel story:\par
\par
"If now, while they are one people, all speaking the same language, they have\par
started to do this, nothing will later stop them from doing whatever they\par
propose to do."\par
\par
Genesis XI, v.6, New American Bible\par
\par
1: Introduction\par
\par
PGN is "Portable Game Notation", a standard designed for the representation of\par
chess game data using ASCII text files.  PGN is structured for easy reading and\par
writing by human users and for easy parsing and generation by computer\par
programs.  The intent of the definition and propagation of PGN is to facilitate\par
the sharing of public domain chess game data among chessplayers (both organic\par
and otherwise), publishers, and computer chess researchers throughout the\par
world.\par
\par
PGN is not intended to be a general purpose standard that is suitable for every\par
possible use; no such standard could fill all conceivable requirements.\par
Instead, PGN is proposed as a universal portable representation for data\par
interchange.  The idea is to allow the construction of a family of chess\par
applications that can quickly and easily process chess game data using PGN for\par
import and export among themselves.\par
\par
2: Chess data representation\par
\par
Computer usage among chessplayers has become quite common in recent years and a\par
variety of different programs, both commercial and public domain, are used to\par
generate, access, and propagate chess game data.  Some of these programs are\par
rather impressive; most are now well behaved in that they correctly follow the\par
Laws of Chess and handle users' data with reasonable care.  Unfortunately, many\par
programs have had serious problems with several aspects of the external\par
representation of chess game data.  Sometimes these problems become more\par
visible when a user attempts to move significant quantities of data from one\par
program to another; if there has been no real effort to ensure portability of\par
data, then the chances for a successful transfer are small at best.\par
\par
2.1: Data interchange incompatibility\par
\par
The reasons for format incompatibility are easy to understand.  In fact, most\par
of them are correlated with the same problems that have already been seen with\par
commercial software offerings for other domains such as word processing,\par
spreadsheets, fonts, and graphics.  Sometimes a manufacturer deliberately\par
designs a data format using encryption or some other secret, proprietary\par
technique to "lock in" a customer.  Sometimes a designer may produce a format\par
that can be deciphered without too much difficulty, but at the same time\par
publicly discourage third party software by claiming trade secret protection.\par
Another software producer may develop a non-proprietary system, but it may work\par
well only within the scope of a single program or application because it is not\par
easily expandable.  Finally, some other software may work very well for many\par
purposes, but it uses symbols and language not easily understood by people or\par
computers available to those outside the country of its development.\par
\par
2.2: Specification goals\par
\par
A specification for a portable game notation must observe the lessons of\par
history and be able to handle probable needs of the future.  The design\par
criteria for PGN were selected to meet these needs.  These criteria include:\par
\par
1) The details of the system must be publicly available and free of unnecessary\par
complexity.  Ideally, if the documentation is not available for some reason,\par
typical chess software developers and users should be able to understand most\par
of the data without the need for third party assistance.\par
\par
2) The details of the system must be non-proprietary so that users and software\par
developers are unrestricted by concerns about infringing on intellectual\par
property rights.  The idea is to let chess programmers compete in a free market\par
where customers may choose software based on their real needs and not based on\par
artificial requirements created by a secret data format.\par
\par
3) The system must work for a variety of programs.  The format should be such\par
that it can be used by chess database programs, chess publishing programs,\par
chess server programs, and chessplaying programs without being unnecessarily\par
specific to any particular application class.\par
\par
4) The system must be easily expandable and scalable.  The expansion ability\par
must include handling data items that may not exist currently but could be\par
expected to emerge in the future.  (Examples: new opening classifications and\par
new country names.)  The system should be scalable in that it must not have any\par
arbitrary restrictions concerning the quantity of stored data.  Also, planned\par
modes of expansion should either preserve earlier databases or at least allow\par
for their automatic conversion.\par
\par
5) The system must be international.  Chess software users are found in many\par
countries and the system should be free of difficulties caused by conventions\par
local to a given region.\par
\par
6) Finally, the system should handle the same kinds and amounts of data that\par
are already handled by existing chess software and by print media.\par
\par
2.3: A sample PGN game\par
\par
Although its description may seem rather lengthy, PGN is actually fairly\par
simple.  A sample PGN game follows; it has most of the important features\par
described in later sections of this document.\par
\par
[Event "F/S Return Match"]\par
[Site "Belgrade, Serbia JUG"]\par
[Date "1992.11.04"]\par
[Round "29"]\par
[White "Fischer, Robert J."]\par
[Black "Spassky, Boris V."]\par
[Result "1/2-1/2"]\par
\par
1. e4 e5 2. Nf3 Nc6 3. Bb5 a6 4. Ba4 Nf6 5. O-O Be7 6. Re1 b5 7. Bb3 d6 8. c3\par
O-O 9. h3 Nb8 10. d4 Nbd7 11. c4 c6 12. cxb5 axb5 13. Nc3 Bb7 14. Bg5 b4 15.\par
Nb1 h6 16. Bh4 c5 17. dxe5 Nxe4 18. Bxe7 Qxe7 19. exd6 Qf6 20. Nbd2 Nxd6 21.\par
Nc4 Nxc4 22. Bxc4 Nb6 23. Ne5 Rae8 24. Bxf7+ Rxf7 25. Nxf7 Rxe1+ 26. Qxe1 Kxf7\par
27. Qe3 Qg5 28. Qxg5 hxg5 29. b3 Ke6 30. a3 Kd6 31. axb4 cxb4 32. Ra5 Nd5 33.\par
f3 Bc8 34. Kf2 Bf5 35. Ra7 g6 36. Ra6+ Kc5 37. Ke1 Nf4 38. g3 Nxh3 39. Kd2 Kb5\par
40. Rd6 Kc5 41. Ra6 Nf2 42. g4 Bd3 43. Re6 1/2-1/2\par
\par
3: Formats: import and export\par
\par
There are two formats in the PGN specification.  These are the "import" format\par
and the "export" format.  These are the two different ways of formatting the\par
same PGN data according to its source.  The details of the two formats are\par
described throughout the following sections of this document.\par
\par
Other than formats, there is the additional topic of PGN presentation.  While\par
both PGN import and export formats are designed to be readable by humans, there\par
is no recommendation that either of these be an ultimate mode of chess data\par
presentation.  Rather, software developers are urged to consider all of the\par
various techniques at their disposal to enhance the display of chess data at\par
the presentation level (i.e., highest level) of their programs.  This means\par
that the use of different fonts, character sizes, color, and other tools of\par
computer aided interaction and publishing should be explored to provide a high\par
quality presentation appropriate to the function of the particular program.\par
\par
3.1: Import format allows for manually prepared data\par
\par
The import format is rather flexible and is used to describe data that may have\par
been prepared by hand, much like a source file for a high level programming\par
language.  A program that can read PGN data should be able to handle the\par
somewhat lax import format.\par
\par
3.2: Export format used for program generated output\par
\par
The export format is rather strict and is used to describe data that is usually\par
prepared under program control, something like a pretty printed source program\par
reformatted by a compiler.\par
\par
3.2.1: Byte equivalence\par
\par
For a given PGN data file, export format representations generated by different\par
PGN programs on the same computing system should be exactly equivalent, byte\par
for byte.\par
\par
3.2.2: Archival storage and the newline character\par
\par
Export format should also be used for archival storage.  Here, "archival"\par
storage is defined as storage that may be accessed by a variety of computing\par
systems.  The only extra requirement for archival storage is that the newline\par
character have a specific representation that is independent of its value for a\par
particular computing system's text file usage.  The archival representation of\par
a newline is the ASCII control character LF (line feed, decimal value 10,\par
hexadecimal value 0x0a).\par
\par
Sadly, there are some accidents of history that survive to this day that have\par
baroque representations for a newline: multicharacter sequences, end-of-line\par
record markers, start-of-line byte counts, fixed length records, and so forth.\par
It is well beyond the scope of the PGN project to reconcile all of these to the\par
unified world of ANSI C and the those enjoying the bliss of a single '\\n'\par
convention.  Some systems may just not be able to handle an archival PGN text\par
file with native text editors.  In these cases, an indulgence of sorts is\par
granted to use the local newline convention in non-archival PGN files for those\par
text editors.\par
\par
3.2.3: Speed of processing\par
\par
Several parts of the export format deal with exact descriptions of line and\par
field justification that are absent from the import format details.  The main\par
reason for these restrictions on the export format are to allow the\par
construction of simple data translation programs that can easily scan PGN data\par
without having to have a full chess engine or other complex parsing routines.\par
The idea is to encourage chess software authors to always allow for at least a\par
limited PGN reading capability.  Even when a full chess engine parsing\par
capability is available, it is likely to be at least two orders of magnitude\par
slower than a simple text scanner.\par
\par
3.2.4: Reduced export format\par
\par
A PGN game represented using export format is said to be in "reduced export\par
format" if all of the following hold: 1) it has no commentary, 2) it has only\par
the standard seven tag roster identification information ("STR", see below), 3)\par
it has no recursive annotation variations ("RAV", see below), and 4) it has no\par
numeric annotation glyphs ("NAG", see below).  Reduced export format is used\par
for bulk storage of unannotated games.  It represents a minimum level of\par
standard conformance for a PGN exporting application.\par
\par
4: Lexicographical issues\par
\par
PGN data is composed of characters; non-overlapping contiguous sequences of\par
characters form lexical tokens.\par
\par
4.1: Character codes\par
\par
PGN data is represented using a subset of the eight bit ISO 8859/1 (Latin 1)\par
character set.  ("ISO" is an acronym for the International Standards\par
Organization.)  This set is also known as ECMA-94 and is similar to other ISO\par
Latin character sets.  ISO 8859/1 includes the standard seven bit ASCII\par
character set for the 32 control character code values from zero to 31.  The 95\par
printing character code values from 32 to 126 are also equivalent to seven bit\par
ASCII usage.  (Code value 127, the ASCII DEL control character, is a graphic\par
character in ISO 8859/1; it is not used for PGN data representation.)\par
\par
The 32 ISO 8859/1 code values from 128 to 159 are non-printing control\par
characters.  They are not used for PGN data representation.  The 32 code values\par
from 160 to 191 are mostly non-alphabetic printing characters and their use for\par
PGN data is discouraged as their graphic representation varies considerably\par
among other ISO Latin sets.  Finally, the 64 code values from 192 to 255 are\par
mostly alphabetic printing characters with various diacritical marks; their use\par
is encouraged for those languages that require such characters.  The graphic\par
representations of this last set of 64 characters is fairly constant for the\par
ISO Latin family.\par
\par
Printing character codes outside of the seven bit ASCII range may only appear\par
in string data and in commentary.  They are not permitted for use in symbol\par
construction.\par
\par
Because some PGN users' environments may not support presentation of non-ASCII\par
characters, PGN game authors should refrain from using such characters in\par
critical commentary or string values in game data that may be referenced in\par
such environments.  PGN software authors should have their programs handle such\par
environments by displaying a question mark ("?") for non-ASCII character codes.\par
This is an important point because there are many computing systems that can\par
display eight bit character data, but the display graphics may differ among\par
machines and operating systems from different manufacturers.\par
\par
Only four of the ASCII control characters are permitted in PGN import format;\par
these are the horizontal and vertical tabs along with the linefeed and carriage\par
return codes.\par
\par
The external representation of the newline character may differ among\par
platforms; this is an acceptable variation as long as the details of the\par
implementation are hidden from software implementors and users.  When a choice\par
is practical, the Unix "newline is linefeed" convention is preferred.\par
\par
4.2: Tab characters\par
\par
Tab characters, both horizontal and vertical, are not permitted in the export\par
format.  This is because the treatment of tab characters is highly dependent\par
upon the particular software in use on the host computing system.  Also, tab\par
characters may not appear inside of string data.\par
\par
4.3: Line lengths\par
\par
PGN data are organized as simple text lines without any special bytes or\par
markers for secondary record structure imposed by specific operating systems.\par
Import format PGN text lines are limited to having a maximum of 255 characters\par
per line including the newline character.  Lines with 80 or more printing\par
characters are strongly discouraged because of the difficulties experienced by\par
common text editors with long lines.\par
\par
In some cases, very long tag values will require 80 or more columns, but these\par
are relatively rare.  An example of this is the "FEN" tag pair; it may have a\par
long tag value, but this particular tag pair is only used to represent a game\par
that doesn't start from the usual initial position.\par
\par
5: Commentary\par
\par
Comment text may appear in PGN data.  There are two kinds of comments.  The\par
first kind is the "rest of line" comment; this comment type starts with a\par
semicolon character and continues to the end of the line.  The second kind\par
starts with a left brace character and continues to the next right brace\par
character.  Comments cannot appear inside any token.\par
\par
Brace comments do not nest; a left brace character appearing in a brace comment\par
loses its special meaning and is ignored.  A semicolon appearing inside of a\par
brace comment loses its special meaning and is ignored.  Braces appearing\par
inside of a semicolon comments lose their special meaning and are ignored.\par
\par
*** Export format representation of comments needs definition work.\par
\par
6: Escape mechanism\par
\par
There is a special escape mechanism for PGN data.  This mechanism is triggered\par
by a percent sign character ("%") appearing in the first column of a line; the\par
data on the rest of the line is ignored by publicly available PGN scanning\par
software.  This escape convention is intended for the private use of software\par
developers and researchers to embed non-PGN commands and data in PGN streams.\par
\par
A percent sign appearing in any other place other than the first position in a\par
line does not trigger the escape mechanism.\par
\par
7: Tokens\par
\par
PGN character data is organized as tokens.  A token is a contiguous sequence of\par
characters that represents a basic semantic unit.  Tokens may be separated from\par
adjacent tokens by white space characters.  (White space characters include\par
space, newline, and tab characters.)  Some tokens are self delimiting and do\par
not require white space characters.\par
\par
A string token is a sequence of zero or more printing characters delimited by a\par
pair of quote characters (ASCII decimal value 34, hexadecimal value 0x22).  An\par
empty string is represented by two adjacent quotes.  (Note: an apostrophe is\par
not a quote.)  A quote inside a string is represented by the backslash\par
immediately followed by a quote.  A backslash inside a string is represented by\par
two adjacent backslashes.  Strings are commonly used as tag pair values (see\par
below).  Non-printing characters like newline and tab are not permitted inside\par
of strings.  A string token is terminated by its closing quote.  Currently, a\par
string is limited to a maximum of 255 characters of data.\par
\par
An integer token is a sequence of one or more decimal digit characters.  It is\par
a special case of the more general "symbol" token class described below.\par
Integer tokens are used to help represent move number indications (see below).\par
An integer token is terminated just prior to the first non-symbol character\par
following the integer digit sequence.\par
\par
A period character (".") is a token by itself.  It is used for move number\par
indications (see below).  It is self terminating.\par
\par
An asterisk character ("*") is a token by itself.  It is used as one of the\par
possible game termination markers (see below); it indicates an incomplete game\par
or a game with an unknown or otherwise unavailable result.  It is self\par
terminating.\par
\par
The left and right bracket characters ("[" and "]") are tokens.  They are used\par
to delimit tag pairs (see below).  Both are self terminating.\par
\par
The left and right parenthesis characters ("(" and ")") are tokens.  They are\par
used to delimit Recursive Annotation Variations (see below).  Both are self\par
terminating.\par
\par
The left and right angle bracket characters ("<" and ">") are tokens.  They are\par
reserved for future expansion.  Both are self terminating.\par
\par
A Numeric Annotation Glyph ("NAG", see below) is a token; it is composed of a\par
dollar sign character ("$") immediately followed by one or more digit\par
characters.  It is terminated just prior to the first non-digit character\par
following the digit sequence.\par
\par
A symbol token starts with a letter or digit character and is immediately\par
followed by a sequence of zero or more symbol continuation characters.  These\par
continuation characters are letter characters ("A-Za-z"), digit characters\par
("0-9"), the underscore ("_"), the plus sign ("+"), the octothorpe sign ("#"),\par
the equal sign ("="), the colon (":"),  and the hyphen ("-").  Symbols are used\par
for a variety of purposes.  All characters in a symbol are significant.  A\par
symbol token is terminated just prior to the first non-symbol character\par
following the symbol character sequence.  Currently, a symbol is limited to a\par
maximum of 255 characters in length.\par
\par
8: Parsing games\par
\par
A PGN database file is a sequential collection of zero or more PGN games.  An\par
empty file is a valid, although somewhat uninformative, PGN database.\par
\par
A PGN game is composed of two sections.  The first is the tag pair section and\par
the second is the movetext section.  The tag pair section provides information\par
that identifies the game by defining the values associated with a set of\par
standard parameters.  The movetext section gives the usually enumerated and\par
possibly annotated moves of the game along with the concluding game termination\par
marker.  The chess moves themselves are represented using SAN (Standard\par
Algebraic Notation), also described later in this document.\par
\par
8.1: Tag pair section\par
\par
The tag pair section is composed of a series of zero or more tag pairs.\par
\par
A tag pair is composed of four consecutive tokens: a left bracket token, a\par
symbol token, a string token, and a right bracket token.  The symbol token is\par
the tag name and the string token is the tag value associated with the tag\par
name.  (There is a standard set of tag names and semantics described below.)\par
The same tag name should not appear more than once in a tag pair section.\par
\par
A further restriction on tag names is that they are composed exclusively of\par
letters, digits, and the underscore character.  This is done to facilitate\par
mapping of tag names into key and attribute names for use with general purpose\par
database programs.\par
\par
For PGN import format, there may be zero or more white space characters between\par
any adjacent pair of tokens in a tag pair.\par
\par
For PGN export format, there are no white space characters between the left\par
bracket and the tag name, there are no white space characters between the tag\par
value and the right bracket, and there is a single space character between the\par
tag name and the tag value.\par
\par
Tag names, like all symbols, are case sensitive.  All tag names used for\par
archival storage begin with an upper case letter.\par
\par
PGN import format may have multiple tag pairs on the same line and may even\par
have a tag pair spanning more than a single line.  Export format requires each\par
tag pair to appear left justified on a line by itself; a single empty line\par
follows the last tag pair.\par
\par
Some tag values may be composed of a sequence of items.  For example, a\par
consultation game may have more than one player for a given side.  When this\par
occurs, the single character ":" (colon) appears between adjacent items.\par
Because of this use as an internal separator in strings, the colon should not\par
otherwise appear in a string.\par
\par
The tag pair format is designed for expansion; initially only strings are\par
allowed as tag pair values.  Tag value formats associated with the STR (Seven\par
Tag Roster, see below) will not change; they will always be string values.\par
However, there are long term plans to allow general list structures as tag\par
values for non-STR tag pairs.  Use of these expanded tag values will likely be\par
restricted to special research programs.  In all events, the top level\par
structure of a tag pair remains the same: left bracket, tag name, tag value,\par
and right bracket.\par
\par
8.1.1: Seven Tag Roster\par
\par
There is a set of tags defined for mandatory use for archival storage of PGN\par
data.  This is the STR (Seven Tag Roster).  The interpretation of these tags is\par
fixed as is the order in which they appear.  Although the definition and use of\par
additional tag names and semantics is permitted and encouraged when needed, the\par
STR is the common ground that all programs should follow for public data\par
interchange.\par
\par
For import format, the order of tag pairs is not important.  For export format,\par
the STR tag pairs appear before any other tag pairs.  (The STR tag pairs must\par
also appear in order; this order is described below).  Also for export format,\par
any additional tag pairs appear in ASCII order by tag name.\par
\par
The seven tag names of the STR are (in order):\par
\par
1) Event (the name of the tournament or match event)\par
\par
2) Site (the location of the event)\par
\par
3) Date (the starting date of the game)\par
\par
4) Round (the playing round ordinal of the game)\par
\par
5) White (the player of the white pieces)\par
\par
6) Black (the player of the black pieces)\par
\par
7) Result (the result of the game)\par
\par
A set of supplemental tag names is given later in this document.\par
\par
For PGN export format, a single blank line appears after the last of the tag\par
pairs to conclude the tag pair section.  This helps simple scanning programs to\par
quickly determine the end of the tag pair section and the beginning of the\par
movetext section.\par
\par
8.1.1.1: The Event tag\par
\par
The Event tag value should be reasonably descriptive.  Abbreviations are to be\par
avoided unless absolutely necessary.  A consistent event naming should be used\par
to help facilitate database scanning.  If the name of the event is unknown, a\par
single question mark should appear as the tag value.\par
\par
Examples:\par
\par
[Event "FIDE World Championship"]\par
\par
[Event "Moscow City Championship"]\par
\par
[Event "ACM North American Computer Championship"]\par
\par
[Event "Casual Game"]\par
\par
8.1.1.2: The Site tag\par
\par
The Site tag value should include city and region names along with a standard\par
name for the country.  The use of the IOC (International Olympic Committee)\par
three letter names is suggested for those countries where such codes are\par
available.  If the site of the event is unknown, a single question mark should\par
appear as the tag value.  A comma may be used to separate a city from a region.\par
No comma is needed to separate a city or region from the IOC country code.  A\par
later section of this document gives a list of three letter nation codes along\par
with a few additions for "locations" not covered by the IOC.\par
\par
Examples:\par
\par
[Site "New York City, NY USA"]\par
\par
[Site "St. Petersburg RUS"]\par
\par
[Site "Riga LAT"]\par
\par
8.1.1.3: The Date tag\par
\par
The Date tag value gives the starting date for the game.  (Note: this is not\par
necessarily the same as the starting date for the event.)  The date is given\par
with respect to the local time of the site given in the Event tag.  The Date\par
tag value field always uses a standard ten character format: "YYYY.MM.DD".  The\par
first four characters are digits that give the year, the next character is a\par
period, the next two characters are digits that give the month, the next\par
character is a period, and the final two characters are digits that give the\par
day of the month.  If the any of the digit fields are not known, then question\par
marks are used in place of the digits.\par
\par
Examples:\par
\par
[Date "1992.08.31"]\par
\par
[Date "1993.??.??"]\par
\par
[Date "2001.01.01"]\par
\par
8.1.1.4: The Round tag\par
\par
The Round tag value gives the playing round for the game.  In a match\par
competition, this value is the number of the game played.  If the use of a\par
round number is inappropriate, then the field should be a single hyphen\par
character.  If the round is unknown, a single question mark should appear as\par
the tag value.\par
\par
Some organizers employ unusual round designations and have multipart playing\par
rounds and sometimes even have conditional rounds.  In these cases, a multipart\par
round identifier can be made from a sequence of integer round numbers separated\par
by periods.  The leftmost integer represents the most significant round and\par
succeeding integers represent round numbers in descending hierarchical order.\par
\par
Examples:\par
\par
[Round "1"]\par
\par
[Round "3.1"]\par
\par
[Round "4.1.2"]\par
\par
8.1.1.5: The White tag\par
\par
The White tag value is the name of the player or players of the white pieces.\par
The names are given as they would appear in a telephone directory.  The family\par
or last name appears first.  If a first name or first initial is available, it\par
is separated from the family name by a comma and a space.  Finally, one or more\par
middle initials may appear.  (Wherever a comma appears, the very next character\par
should be a space.  Wherever an initial appears, the very next character should\par
be a period.)  If the name is unknown, a single question mark should appear as\par
the tag value.\par
\par
The intent is to allow meaningful ASCII sorting of the tag value that is\par
independent of regional name formation customs.  If more than one person is\par
playing the white pieces, the names are listed in alphabetical order and are\par
separated by the colon character between adjacent entries.  A player who is\par
also a computer program should have appropriate version information listed\par
after the name of the program.\par
\par
The format used in the FIDE Rating Lists is appropriate for use for player name\par
tags.\par
\par
Examples:\par
\par
[White "Tal, Mikhail N."]\par
\par
[White "van der Wiel, Johan"]\par
\par
[White "Acme Pawngrabber v.3.2"]\par
\par
[White "Fine, R."]\par
\par
8.1.1.6: The Black tag\par
\par
The Black tag value is the name of the player or players of the black pieces.\par
The names are given here as they are for the White tag value.\par
\par
Examples:\par
\par
[Black "Lasker, Emmanuel"]\par
\par
[Black "Smyslov, Vasily V."]\par
\par
[Black "Smith, John Q.:Woodpusher 2000"]\par
\par
[Black "Morphy"]\par
\par
8.1.1.7: The Result tag\par
\par
The Result field value is the result of the game.  It is always exactly the\par
same as the game termination marker that concludes the associated movetext.  It\par
is always one of four possible values: "1-0" (White wins), "0-1" (Black wins),\par
"1/2-1/2" (drawn game), and "*" (game still in progress, game abandoned, or\par
result otherwise unknown).  Note that the digit zero is used in both of the\par
first two cases; not the letter "O".\par
\par
All possible examples:\par
\par
[Result "0-1"]\par
\par
[Result "1-0"]\par
\par
[Result "1/2-1/2"]\par
\par
[Result "*"]\par
\par
8.2: Movetext section\par
\par
The movetext section is composed of chess moves, move number indications,\par
optional annotations, and a single concluding game termination marker.\par
\par
Because illegal moves are not real chess moves, they are not permitted in PGN\par
movetext.  They may appear in commentary, however.  One would hope that illegal\par
moves are relatively rare in games worthy of recording.\par
\par
8.2.1: Movetext line justification\par
\par
In PGN import format, tokens in the movetext do not require any specific line\par
justification.\par
\par
In PGN export format, tokens in the movetext are placed left justified on\par
successive text lines each of which has less than 80 printing characters.  As\par
many tokens as possible are placed on a line with the remainder appearing on\par
successive lines.  A single space character appears between any two adjacent\par
symbol tokens on the same line in the movetext.  As with the tag pair section,\par
a single empty line follows the last line of data to conclude the movetext\par
section.\par
\par
Neither the first or the last character on an export format PGN line is a\par
space.  (This may change in the case of commentary; this area is currently\par
under development.)\par
\par
8.2.2: Movetext move number indications\par
\par
A move number indication is composed of one or more adjacent digits (an integer\par
token) followed by zero or more periods.  The integer portion of the indication\par
gives the move number of the immediately following white move (if present) and\par
also the immediately following black move (if present).\par
\par
8.2.2.1: Import format move number indications\par
\par
PGN import format does not require move number indications.  It does not\par
prohibit superfluous move number indications anywhere in the movetext as long\par
as the move numbers are correct.\par
\par
PGN import format move number indications may have zero or more period\par
characters following the digit sequence that gives the move number; one or more\par
white space characters may appear between the digit sequence and the period(s).\par
\par
8.2.2.2: Export format move number indications\par
\par
There are two export format move number indication formats, one for use\par
appearing immediately before a white move element and one for use appearing\par
immediately before a black move element.  A white move number indication is\par
formed from the integer giving the fullmove number with a single period\par
character appended.  A black move number indication is formed from the integer\par
giving the fullmove number with three period characters appended.\par
\par
All white move elements have a preceding move number indication.  A black move\par
element has a preceding move number indication only in two cases: first, if\par
there is intervening annotation or commentary between the black move and the\par
previous white move; and second, if there is no previous white move in the\par
special case where a game starts from a position where Black is the active\par
player.\par
\par
There are no other cases where move number indications appear in PGN export\par
format.\par
\par
8.2.3: Movetext SAN (Standard Algebraic Notation)\par
\par
SAN (Standard Algebraic Notation) is a representation standard for chess moves\par
using the ASCII Latin alphabet.\par
\par
Examples of SAN recorded games are found throughout most modern chess\par
publications.  SAN as presented in this document uses English language single\par
character abbreviations for chess pieces, although this is easily changed in\par
the source.  English is chosen over other languages because it appears to be\par
the most widely recognized.\par
\par
An alternative to SAN is FAN (Figurine Algebraic Notation).  FAN uses miniature\par
piece icons instead of single letter piece abbreviations.  The two notations\par
are otherwise identical.\par
\par
8.2.3.1: Square identification\par
\par
SAN identifies each of the sixty four squares on the chessboard with a unique\par
two character name.  The first character of a square identifier is the file of\par
the square; a file is a column of eight squares designated by a single lower\par
case letter from "a" (leftmost or queenside) up to and including "h" (rightmost\par
or kingside).  The second character of a square identifier is the rank of the\par
square; a rank is a row of eight squares designated by a single digit from "1"\par
(bottom side [White's first rank]) up to and including "8" (top side [Black's\par
first rank]).  The initial squares of some pieces are: white queen rook at a1,\par
white king at e1, black queen knight pawn at b7, and black king rook at h8.\par
\par
8.2.3.2: Piece identification\par
\par
SAN identifies each piece by a single upper case letter.  The standard English\par
values: pawn = "P", knight = "N", bishop = "B", rook = "R", queen = "Q", and\par
king = "K".\par
\par
The letter code for a pawn is not used for SAN moves in PGN export format\par
movetext.  However, some PGN import software disambiguation code may allow for\par
the appearance of pawn letter codes.  Also, pawn and other piece letter codes\par
are needed for use in some tag pair and annotation constructs.\par
\par
It is admittedly a bit chauvinistic to select English piece letters over those\par
from other languages.  There is a slight justification in that English is a de\par
facto universal second language among most chessplayers and program users.  It\par
is probably the best that can be done for now.  A later section of this\par
document gives alternative piece letters, but these should be used only for\par
local presentation software and not for archival storage or for dynamic\par
interchange among programs.\par
\par
8.2.3.3: Basic SAN move construction\par
\par
A basic SAN move is given by listing the moving piece letter (omitted for\par
pawns) followed by the destination square.  Capture moves are denoted by the\par
lower case letter "x" immediately prior to the destination square; pawn\par
captures include the file letter of the originating square of the capturing\par
pawn immediately prior to the "x" character.\par
\par
SAN kingside castling is indicated by the sequence "O-O"; queenside castling is\par
indicated by the sequence "O-O-O".  Note that the upper case letter "O" is\par
used, not the digit zero.  The use of a zero character is not only incompatible\par
with traditional text practices, but it can also confuse parsing algorithms\par
which also have to understand about move numbers and game termination markers.\par
Also note that the use of the letter "O" is consistent with the practice of\par
having all chess move symbols start with a letter; also, it follows the\par
convention that all non-pwn move symbols start with an upper case letter.\par
\par
En passant captures do not have any special notation; they are formed as if the\par
captured pawn were on the capturing pawn's destination square.  Pawn promotions\par
are denoted by the equal sign "=" immediately following the destination square\par
with a promoted piece letter (indicating one of knight, bishop, rook, or queen)\par
immediately following the equal sign.  As above, the piece letter is in upper\par
case.\par
\par
8.2.3.4: Disambiguation\par
\par
In the case of ambiguities (multiple pieces of the same type moving to the same\par
square), the first appropriate disambiguating step of the three following steps\par
is taken:\par
\par
First, if the moving pieces can be distinguished by their originating files,\par
the originating file letter of the moving piece is inserted immediately after\par
the moving piece letter.\par
\par
Second (when the first step fails), if the moving pieces can be distinguished\par
by their originating ranks, the originating rank digit of the moving piece is\par
inserted immediately after the moving piece letter.\par
\par
Third (when both the first and the second steps fail), the two character square\par
coordinate of the originating square of the moving piece is inserted\par
immediately after the moving piece letter.\par
\par
Note that the above disambiguation is needed only to distinguish among moves of\par
the same piece type to the same square; it is not used to distinguish among\par
attacks of the same piece type to the same square.  An example of this would be\par
a position with two white knights, one on square c3 and one on square g1 and a\par
vacant square e2 with White to move.  Both knights attack square e2, and if\par
both could legally move there, then a file disambiguation is needed; the\par
(nonchecking) knight moves would be "Nce2" and "Nge2".  However, if the white\par
king were at square e1 and a black bishop were at square b4 with a vacant\par
square d2 (thus an absolute pin of the white knight at square c3), then only\par
one white knight (the one at square g1) could move to square e2: "Ne2".\par
\par
8.2.3.5: Check and checkmate indication characters\par
\par
If the move is a checking move, the plus sign "+" is appended as a suffix to\par
the basic SAN move notation; if the move is a checkmating move, the octothorpe\par
sign "#" is appended instead.\par
\par
Neither the appearance nor the absence of either a check or checkmating\par
indicator is used for disambiguation purposes.  This means that if two (or\par
more) pieces of the same type can move to the same square the differences in\par
checking status of the moves does not allieviate the need for the standard rank\par
and file disabiguation described above.  (Note that a difference in checking\par
status for the above may occur only in the case of a discovered check.)\par
\par
Neither the checking or checkmating indicators are considered annotation as\par
they do not communicate subjective information.  Therefore, they are\par
qualitatively different from move suffix annotations like "!" and "?".\par
Subjective move annotations are handled using Numeric Annotation Glyphs as\par
described in a later section of this document.\par
\par
There are no special markings used for double checks or discovered checks.\par
\par
There are no special markings used for drawing moves.\par
\par
8.2.3.6: SAN move length\par
\par
SAN moves can be as short as two characters (e.g., "d4"), or as long as seven\par
characters (e.g., "Qa6xb7#", "fxg1=Q+").  The average SAN move length seen in\par
realistic games is probably just fractionally longer than three characters.  If\par
the SAN rules seem complicated, be assured that the earlier notation systems of\par
LEN (Long English Notation) and EDN (English Descriptive Notation) are much\par
more complex, and that LAN (Long Algebraic Notation, the predecessor of SAN) is\par
unnecessarily bulky.\par
\par
8.2.3.7: Import and export SAN\par
\par
PGN export format always uses the above canonical SAN to represent moves in the\par
movetext section of a PGN game.  Import format is somewhat more relaxed and it\par
makes allowances for moves that do not conform exactly to the canonical format.\par
However, these allowances may differ among different PGN reader programs.  Only\par
data appearing in export format is in all cases guaranteed to be importable\par
into all PGN readers.\par
\par
There are a number of suggested guidelines for use with implementing PGN reader\par
software for permitting non-canonical SAN move representation.  The idea is to\par
have a PGN reader apply various transformations to attempt to discover the move\par
that is represented by non-canonical input.  Some suggested transformations\par
include: letter case remapping, capture indicator insertion, check indicator\par
insertion, and checkmate indicator insertion.\par
\par
8.2.3.8: SAN move suffix annotations\par
\par
Import format PGN allows for the use of traditional suffix annotations for\par
moves.  There are exactly six such annotations available: "!", "?", "!!", "!?",\par
"?!", and "??".  At most one such suffix annotation may appear per move, and if\par
present, it is always the last part of the move symbol.\par
\par
When exported, a move suffix annotation is translated into the corresponding\par
Numeric Annotation Glyph as described in a later section of this document.  For\par
example, if the single move symbol "Qxa8?" appears in an import format PGN\par
movetext, it would be replaced with the two adjacent symbols "Qxa8 $2".\par
\par
8.2.4: Movetext NAG (Numeric Annotation Glyph)\par
\par
An NAG (Numeric Annotation Glyph) is a movetext element that is used to\par
indicate a simple annotation in a language independent manner.  An NAG is\par
formed from a dollar sign ("$") with a non-negative decimal integer suffix.\par
The non-negative integer must be from zero to 255 in value.\par
\par
8.2.5: Movetext RAV (Recursive Annotation Variation)\par
\par
An RAV (Recursive Annotation Variation) is a sequence of movetext containing\par
one or more moves enclosed in parentheses.  An RAV is used to represent an\par
alternative variation.  The alternate move sequence given by an RAV is one that\par
may be legally played by first unplaying the move that appears immediately\par
prior to the RAV.  Because the RAV is a recursive construct, it may be nested.\par
\par
*** The specification for import/export representation of RAV elements needs\par
further development.\par
\par
8.2.6: Game Termination Markers\par
\par
Each movetext section has exactly one game termination marker; the marker\par
always occurs as the last element in the movetext.  The game termination marker\par
is a symbol that is one of the following four values: "1-0" (White wins), "0-1"\par
(Black wins), "1/2-1/2" (drawn game), and "*" (game in progress, result\par
unknown, or game abandoned).  Note that the digit zero is used in the above;\par
not the upper case letter "O".  The game termination marker appearing in the\par
movetext of a game must match the value of the game's Result tag pair.  (While\par
the marker appears as a string in the Result tag, it appears as a symbol\par
without quotes in the movetext.)\par
\par
9: Supplemental tag names\par
\par
The following tag names and their associated semantics are recommended for use\par
for information not contained in the Seven Tag Roster.\par
\par
9.1: Player related information\par
\par
Note that if there is more than one player field in an instance of a player\par
(White or Black) tag, then there will be corresponding multiple fields in any\par
of the following tags.  For example, if the White tag has the three field value\par
"Jones:Smith:Zacharias" (a consultation game), then the WhiteTitle tag could\par
have a value of "IM:-:GM" if Jones was an International Master, Smith was\par
untitled, and Zacharias was a Grandmaster.\par
\par
9.1.1: Tags: WhiteTitle, BlackTitle\par
\par
These use string values such as "FM", "IM", and "GM"; these tags are used only\par
for the standard abbreviations for FIDE titles.  A value of "-" is used for an\par
untitled player.\par
\par
9.1.2: Tags: WhiteElo, BlackElo\par
\par
These tags use integer values; these are used for FIDE Elo ratings.  A value of\par
"-" is used for an unrated player.\par
\par
9.1.3: Tags: WhiteUSCF, BlackUSCF\par
\par
These tags use integer values; these are used for USCF (United States Chess\par
Federation) ratings.  Similar tag names can be constructed for other rating\par
agencies.\par
\par
9.1.4: Tags: WhiteNA, BlackNA\par
\par
These tags use string values; these are the e-mail or network addresses of the\par
players.  A value of "-" is used for a player without an electronic address.\par
\par
9.1.5: Tags: WhiteType, BlackType\par
\par
These tags use string values; these describe the player types.  The value\par
"human" should be used for a person while the value "program" should be used\par
for algorithmic (computer) players.\par
\par
9.2: Event related information\par
\par
The following tags are used for providing additional information about the\par
event.\par
\par
9.2.1: Tag: EventDate\par
\par
This uses a date value, similar to the Date tag field, that gives the starting\par
date of the Event.\par
\par
9.2.2: Tag: EventSponsor\par
\par
This uses a string value giving the name of the sponsor of the event.\par
\par
9.2.3: Tag: Section\par
\par
This uses a string; this is used for the playing section of a tournament (e.g.,\par
"Open" or "Reserve").\par
\par
9.2.4: Tag: Stage\par
\par
This uses a string; this is used for the stage of a multistage event (e.g.,\par
"Preliminary" or "Semifinal").\par
\par
9.2.5: Tag: Board\par
\par
This uses an integer; this identifies the board number in a team event and also\par
in a simultaneous exhibition.\par
\par
9.3: Opening information (locale specific)\par
\par
The following tag pairs are used for traditional opening names.  The associated\par
tag values will vary according to the local language in use.\par
\par
9.3.1: Tag: Opening\par
\par
This uses a string; this is used for the traditional opening name.  This will\par
vary by locale.  This tag pair is associated with the use of the EPD opcode\par
"v0" described in a later section of this document.\par
\par
9.3.2: Tag: Variation\par
\par
This uses a string; this is used to further refine the Opening tag.  This will\par
vary by locale.  This tag pair is associated with the use of the EPD opcode\par
"v1" described in a later section of this document.\par
\par
9.3.3: Tag: SubVariation\par
\par
This uses a string; this is used to further refine the Variation tag.  This\par
will vary by locale.  This tag pair is associated with the use of the EPD\par
opcode "v2" described in a later section of this document.\par
\par
9.4: Opening information (third party vendors)\par
\par
The following tag pairs are used for representing opening identification\par
according to various third party vendors and organizations.  References to\par
these organizations does not imply any endorsement of them or any endorsement\par
by them.\par
\par
9.4.1: Tag: ECO\par
\par
This uses a string of either the form "XDD" or the form "XDD/DD" where the "X"\par
is a letter from "A" to "E" and the "D" positions are digits; this is used for\par
an opening designation from the five volume Encyclopedia of Chess Openings.\par
This tag pair is associated with the use of the EPD opcode "eco" described in a\par
later section of this document.\par
\par
9.4.2: Tag: NIC\par
\par
This uses a string; this is used for an opening designation from the _New in\par
Chess_ database.  This tag pair is associated with the use of the EPD opcode\par
"nic" described in a later section of this document.\par
\par
9.5: Time and date related information\par
\par
The following tags assist with further refinement of the time and data\par
information associated with a game.\par
\par
9.5.1: Tag: Time\par
\par
This uses a time-of-day value in the form "HH:MM:SS"; similar to the Date tag\par
except that it denotes the local clock time (hours, minutes, and seconds) of\par
the start of the game.  Note that colons, not periods, are used for field\par
separators for the Time tag value.  The value is taken from the local time\par
corresponding to the location given in the Site tag pair.\par
\par
9.5.2: Tag: UTCTime\par
\par
This tag is similar to the Time tag except that the time is given according to\par
the Universal Coordinated Time standard.\par
\par
9.5.3: Tag:; UTCDate\par
\par
This tag is similar to the Date tag except that the date is given according to\par
the Universal Coordinated Time standard.\par
\par
9.6: Time control\par
\par
The follwing tag is used to help describe the time control used with the game.\par
\par
9.6.1: Tag: TimeControl\par
\par
This uses a list of one or more time control fields.  Each field contains a\par
descriptor for each time control period; if more than one descriptor is present\par
then they are separated by the colon character (":").  The descriptors appear\par
in the order in which they are used in the game.  The last field appearing is\par
considered to be implicitly repeated for further control periods as needed.\par
\par
There are six kinds of TimeControl fields.\par
\par
The first kind is a single question mark ("?") which means that the time\par
control mode is unknown.  When used, it is usually the only descriptor present.\par
\par
The second kind is a single hyphen ("-") which means that there was no time\par
control mode in use.  When used, it is usually the only descriptor present.\par
\par
The third Time control field kind is formed as two positive integers separated\par
by a solidus ("/") character.  The first integer is the number of moves in the\par
period and the second is the number of seconds in the period.  Thus, a time\par
control period of 40 moves in 2 1/2 hours would be represented as "40/9000".\par
\par
The fourth TimeControl field kind is used for a "sudden death" control period.\par
It should only be used for the last descriptor in a TimeControl tag value.  It\par
is sometimes the only descriptor present.  The format consists of a single\par
integer that gives the number of seconds in the period.  Thus, a blitz game\par
would be represented with a TimeControl tag value of "300".\par
\par
The fifth TimeControl field kind is used for an "incremental" control period.\par
It should only be used for the last descriptor in a TimeControl tag value and\par
is usually the only descriptor in the value.  The format consists of two\par
positive integers separated by a plus sign ("+") character.  The first integer\par
gives the minimum number of seconds allocated for the period and the second\par
integer gives the number of extra seconds added after each move is made.  So,\par
an incremental time control of 90 minutes plus one extra minute per move would\par
be given by "4500+60" in the TimeControl tag value.\par
\par
The sixth TimeControl field kind is used for a "sandclock" or "hourglass"\par
control period.  It should only be used for the last descriptor in a\par
TimeControl tag value and is usually the only descriptor in the value.  The\par
format consists of an asterisk ("*") immediately followed by a positive\par
integer.  The integer gives the total number of seconds in the sandclock\par
period.  The time control is implemented as if a sandclock were set at the\par
start of the period with an equal amount of sand in each of the two chambers\par
and the players invert the sandclock after each move with a time forfeit\par
indicated by an empty upper chamber.  Electronic implementation of a physical\par
sandclock may be used.  An example sandclock specification for a common three\par
minute egg timer sandclock would have a tag value of "*180".\par
\par
Additional TimeControl field kinds will be defined as necessary.\par
\par
9.7: Alternative starting positions\par
\par
There are two tags defined for assistance with describing games that did not\par
start from the usual initial array.\par
\par
9.7.1: Tag: SetUp\par
\par
This tag takes an integer that denotes the "set-up" status of the game.  A\par
value of "0" indicates that the game has started from the usual initial array.\par
A value of "1" indicates that the game started from a set-up position; this\par
position is given in the "FEN" tag pair.  This tag must appear for a game\par
starting with a set-up position.  If it appears with a tag value of "1", a FEN\par
tag pair must also appear.\par
\par
9.7.2: Tag: FEN\par
\par
This tag uses a string that gives the Forsyth-Edwards Notation for the starting\par
position used in the game.  FEN is described in a later section of this\par
document.  If a SetUp tag appears with a tag value of "1", the FEN tag pair is\par
also required.\par
\par
9.8: Game conclusion\par
\par
There is a single tag that discusses the conclusion of the game.\par
\par
9.8.1: Tag: Termination\par
\par
This takes a string that describes the reason for the conclusion of the game.\par
While the Result tag gives the result of the game, it does not provide any\par
extra information and so the Termination tag is defined for this purpose.\par
\par
Strings that may appear as Termination tag values:\par
\par
* "abandoned": abandoned game.\par
\par
* "adjudication": result due to third party adjudication process.\par
\par
* "death": losing player called to greater things, one hopes.\par
\par
* "emergency": game concluded due to unforeseen circumstances.\par
\par
* "normal": game terminated in a normal fashion.\par
\par
* "rules infraction": administrative forfeit due to losing player's failure to\par
observe either the Laws of Chess or the event regulations.\par
\par
* "time forfeit": loss due to losing player's failure to meet time control\par
requirements.\par
\par
* "unterminated": game not terminated.\par
\par
9.9: Miscellaneous\par
\par
These are tags that can be briefly described and that doon't fit well inother\par
sections.\par
\par
9.9.1: Tag: Annotator\par
\par
This tag uses a name or names in the format of the player name tags; this\par
identifies the annotator or annotators of the game.\par
\par
9.9.2: Tag: Mode\par
\par
This uses a string that gives the playing mode of the game.  Examples: "OTB"\par
(over the board), "PM" (paper mail), "EM" (electronic mail), "ICS" (Internet\par
Chess Server), and "TC" (general telecommunication).\par
\par
9.9.3: Tag: PlyCount\par
\par
This tag takes a single integer that gives the number of ply (moves) in the\par
game.\par
\par
10: Numeric Annotation Glyphs\par
\par
NAG zero is used for a null annotation; it is provided for the convenience of\par
software designers as a placeholder value and should probably not be used in\par
external PGN data.\par
\par
NAGs with values from 1 to 9 annotate the move just played.\par
\par
NAGs with values from 10 to 135 modify the current position.\par
\par
NAGs with values from 136 to 139 describe time pressure.\par
\par
Other NAG values are reserved for future definition.\par
\par
Note: the number assignments listed below should be considered preliminary in\par
nature; they are likely to be changed as a result of reviewer feedback.\par
\par
NAG    Interpretation\par
---    --------------\par
  0    null annotation\par
  1    good move (traditional "!")\par
  2    poor move (traditional "?")\par
  3    very good move (traditional "!!")\par
  4    very poor move (traditional "??")\par
  5    speculative move (traditional "!?")\par
  6    questionable move (traditional "?!")\par
  7    forced move (all others lose quickly)\par
  8    singular move (no reasonable alternatives)\par
  9    worst move\par
 10    drawish position\par
 11    equal chances, quiet position\par
 12    equal chances, active position\par
 13    unclear position\par
 14    White has a slight advantage\par
 15    Black has a slight advantage\par
 16    White has a moderate advantage\par
 17    Black has a moderate advantage\par
 18    White has a decisive advantage\par
 19    Black has a decisive advantage\par
 20    White has a crushing advantage (Black should resign)\par
 21    Black has a crushing advantage (White should resign)\par
 22    White is in zugzwang\par
 23    Black is in zugzwang\par
 24    White has a slight space advantage\par
 25    Black has a slight space advantage\par
 26    White has a moderate space advantage\par
 27    Black has a moderate space advantage\par
 28    White has a decisive space advantage\par
 29    Black has a decisive space advantage\par
 30    White has a slight time (development) advantage\par
 31    Black has a slight time (development) advantage\par
 32    White has a moderate time (development) advantage\par
 33    Black has a moderate time (development) advantage\par
 34    White has a decisive time (development) advantage\par
 35    Black has a decisive time (development) advantage\par
 36    White has the initiative\par
 37    Black has the initiative\par
 38    White has a lasting initiative\par
 39    Black has a lasting initiative\par
 40    White has the attack\par
 41    Black has the attack\par
 42    White has insufficient compensation for material deficit\par
 43    Black has insufficient compensation for material deficit\par
 44    White has sufficient compensation for material deficit\par
 45    Black has sufficient compensation for material deficit\par
 46    White has more than adequate compensation for material deficit\par
 47    Black has more than adequate compensation for material deficit\par
 48    White has a slight center control advantage\par
 49    Black has a slight center control advantage\par
 50    White has a moderate center control advantage\par
 51    Black has a moderate center control advantage\par
 52    White has a decisive center control advantage\par
 53    Black has a decisive center control advantage\par
 54    White has a slight kingside control advantage\par
 55    Black has a slight kingside control advantage\par
 56    White has a moderate kingside control advantage\par
 57    Black has a moderate kingside control advantage\par
 58    White has a decisive kingside control advantage\par
 59    Black has a decisive kingside control advantage\par
 60    White has a slight queenside control advantage\par
 61    Black has a slight queenside control advantage\par
 62    White has a moderate queenside control advantage\par
 63    Black has a moderate queenside control advantage\par
 64    White has a decisive queenside control advantage\par
 65    Black has a decisive queenside control advantage\par
 66    White has a vulnerable first rank\par
 67    Black has a vulnerable first rank\par
 68    White has a well protected first rank\par
 69    Black has a well protected first rank\par
 70    White has a poorly protected king\par
 71    Black has a poorly protected king\par
 72    White has a well protected king\par
 73    Black has a well protected king\par
 74    White has a poorly placed king\par
 75    Black has a poorly placed king\par
 76    White has a well placed king\par
 77    Black has a well placed king\par
 78    White has a very weak pawn structure\par
 79    Black has a very weak pawn structure\par
 80    White has a moderately weak pawn structure\par
 81    Black has a moderately weak pawn structure\par
 82    White has a moderately strong pawn structure\par
 83    Black has a moderately strong pawn structure\par
 84    White has a very strong pawn structure\par
 85    Black has a very strong pawn structure\par
 86    White has poor knight placement\par
 87    Black has poor knight placement\par
 88    White has good knight placement\par
 89    Black has good knight placement\par
 90    White has poor bishop placement\par
 91    Black has poor bishop placement\par
 92    White has good bishop placement\par
 93    Black has good bishop placement\par
 84    White has poor rook placement\par
 85    Black has poor rook placement\par
 86    White has good rook placement\par
 87    Black has good rook placement\par
 98    White has poor queen placement\par
 99    Black has poor queen placement\par
100    White has good queen placement\par
101    Black has good queen placement\par
102    White has poor piece coordination\par
103    Black has poor piece coordination\par
104    White has good piece coordination\par
105    Black has good piece coordination\par
106    White has played the opening very poorly\par
107    Black has played the opening very poorly\par
108    White has played the opening poorly\par
109    Black has played the opening poorly\par
110    White has played the opening well\par
111    Black has played the opening well\par
112    White has played the opening very well\par
113    Black has played the opening very well\par
114    White has played the middlegame very poorly\par
115    Black has played the middlegame very poorly\par
116    White has played the middlegame poorly\par
117    Black has played the middlegame poorly\par
118    White has played the middlegame well\par
119    Black has played the middlegame well\par
120    White has played the middlegame very well\par
121    Black has played the middlegame very well\par
122    White has played the ending very poorly\par
123    Black has played the ending very poorly\par
124    White has played the ending poorly\par
125    Black has played the ending poorly\par
126    White has played the ending well\par
127    Black has played the ending well\par
128    White has played the ending very well\par
129    Black has played the ending very well\par
130    White has slight counterplay\par
131    Black has slight counterplay\par
132    White has moderate counterplay\par
133    Black has moderate counterplay\par
134    White has decisive counterplay\par
135    Black has decisive counterplay\par
136    White has moderate time control pressure\par
137    Black has moderate time control pressure\par
138    White has severe time control pressure\par
139    Black has severe time control pressure\par
\par
11: File names and directories\par
\par
File names chosen for PGN data should be both informative and portable.  The\par
directory names and arrangements should also be chosen for the same reasons and\par
also for ease of navigation.\par
\par
Some of suggested file and directory names may be difficult or impossible to\par
represent on certain computing systems.  Use of appropriate conversion customs\par
is encouraged.\par
\par
11.1: File name suffix for PGN data\par
\par
The use of the file suffix ".pgn" is encouraged for ASCII text files containing\par
PGN data.\par
\par
11.2: File name formation for PGN data for a specific player\par
\par
PGN games for a specific player should have a file name consisting of the\par
player's last name followed by the ".pgn" suffix.\par
\par
11.3: File name formation for PGN data for a specific event\par
\par
PGN games for a specific event should have a file name consisting of the\par
event's name followed by the ".pgn" suffix.\par
\par
11.4: File name formation for PGN data for chronologically ordered games\par
\par
PGN data files used for chronologically ordered (oldest first) archives use\par
date information as file name root strings.  A file containing all the PGN\par
games for a given year would have an eight character name in the format\par
"YYYY.pgn".  A file containing PGN data for a given month would have a ten\par
character name in the format "YYYYMM.pgn".  Finally, a file for PGN games for a\par
single day would have a twelve character name in the format "YYYYMMDD.pgn".\par
Large files are split into smaller files as needed.\par
\par
As game files are commonly arranged by chronological order, games with missing\par
or incomplete Date tag pair data are to be avoided.  Any question mark\par
characters in a Date tag value will be treated as zero digits for collation\par
within a file and also for file naming.\par
\par
Large quantities of PGN data arranged by chronological order should be\par
organized into hierarchical directories.  A directory containing all PGN data\par
for a given year would have a four character name in the format "YYYY";\par
directories containing PGN files for a given month would have a six character\par
name in the format "YYYYMM".\par
\par
11.5: Suggested directory tree organization\par
\par
A suggested directory arrangement for ftp sites and CD-ROM distributions:\par
\par
* PGN: master directory of the PGN subtree (pub/chess/Game-Databases/PGN)\par
\par
* PGN/Events: directory of PGN files, each for a specific event\par
\par
* PGN/Events/News: news and status of the event collection\par
\par
* PGN/Events/ReadMe: brief description of the local directory contents\par
\par
* PGN/MGR: directory of the Master Games Repository subtree\par
\par
* PGN/MGR/News: news and status of the entire PGN/MGR subtree\par
\par
* PGN/MGR/ReadMe: brief description of the local directory contents\par
\par
* PGN/MGR/YYYY: directory of games or subtrees for the year YYYY\par
\par
* PGN/MGR/YYYY/ReadMe: description of local directory for year YYYY\par
\par
* PGN/MGR/YYYY/News: news and status for year YYYY data\par
\par
* PGN/News: news and status of the entire PGN subtree\par
\par
* PGN/Players: directory of PGN files, each for a specific player\par
\par
* PGN/Players/News: news and status of the player collection\par
\par
* PGN/Players/ReadMe: brief description of the local directory contents\par
\par
* PGN/ReadMe: brief description of the local directory contents\par
\par
* PGN/Standard: the PGN standard (this document)\par
\par
* PGN/Tools: software utilities that access PGN data\par
\par
12: PGN collating sequence\par
\par
There is a standard sorting order for PGN games within a file.  This collation\par
is based on eight keys; these are the seven tag values of the STR and also the\par
movetext itself.\par
\par
The first (most important, primary key) is the Date tag.  Earlier dated games\par
appear prior to games played at a later date.  This field is sorted by\par
ascending numeric value first with the year, then the month, and finally the\par
day of the month.  Query characters used for unknown date digit values will be\par
treated as zero digit characters for ordering comparison.\par
\par
The second key is the Event tag.  This is sorted in ascending ASCII order.\par
\par
The third key is the Site tag.  This is sorted in ascending ASCII order.\par
\par
The fourth key is the Round tag.  This is sorted in ascending numeric order\par
based on the value of the integer used to denote the playing round.  A query or\par
hyphen used for the round is ordered before any integer value.  A query\par
character is ordered before a hyphen character.\par
\par
The fifth key is the White tag.  This is sorted in ascending ASCII order.\par
\par
The sixth key is the Black tag.  This is sorted in ascending ASCII order.\par
\par
The seventh key is the Result tag.  This is sorted in ascending ASCII order.\par
\par
The eighth key is the movetext itself.  This is sorted in ascending ASCII order\par
with the entire text including spaces and newline characters.\par
\par
13: PGN software\par
\par
This section describes some PGN software that is either currently available or\par
expected to be available in the near future.  The entries are presented in\par
rough chronological order of their being made known to the PGN standard\par
coordinator.  Authors of PGN capable software are encouraged to contact the\par
coordinator (e-mail address listed near the start of this document) so that the\par
information may be included here in this section.\par
\par
In addition to the PGN standard, there are two more chess standards of interest\par
to the chess software community.  These are the FEN standard (Forsyth-Edwards\par
Notation) for position notation and the EPD standard (Extended Position\par
Description) for comprehensive position description for automated interprogram\par
processing.  These are described in a later section of this document.\par
\par
Some PGN software is freeware and can be gotten from ftp sites and other\par
sources.  Other PGN software is payware and appears as part of commercial\par
chessplaying programs and chess database managers.  Those who are interested in\par
the propagation of the PGN standard are encouraged to support manufacturers of\par
chess software that use the standard.  If a particular vendor does not offer\par
PGN compatibility, it is likely that a few letters to them along with a copy of\par
this specification may help them decide to include PGN support in their next\par
release.\par
\par
The staff at the University of Oklahoma at Norman (USA) have graciously\par
provided an ftp site (chess.uoknor.edu) for the storage of chess related data\par
and programs.  Because file names change over time, those accessing the site\par
are encouraged to first retrieve the file "pub/chess/ls-lR.gz" for a current\par
listing.  A scan of this listing will also help locate versions of PGN programs\par
for machine types and operating systems other than those listed below.  Further\par
information about this archive can be gotten from its administrator, Chris\par
Petroff (chris@uoknor.edu).\par
\par
For European users, the kind staff at the University of Hamburg (Germany) have\par
provided the ftp site ftp.math.uni-hamburg.de; this carries a daily mirror of\par
the pub/chess directory at the chess.uoknor.edu site.\par
\par
13.1: The SAN Kit\par
\par
The "SAN Kit" is an ANSI C source chess programming toolkit available for free\par
from the ftp site chess.uoknor.edu in the directory pub/chess/Unix as the file\par
"SAN.tar.gz" (a gzip tar archive).  This kit contains code for PGN import and\par
export and can be used to "regularize" PGN data into reduced export format by\par
use of its "tfgg" command.  The SAN Kit also supports FEN I/O.  Code from this\par
kit is freely redistributable for anyone as long as future distribution is\par
unhindered for everyone.  The SAN Kit is undergoing continuous development,\par
although dates of future deliveries are quite difficult to predict and releases\par
sometimes appear months apart.  Suggestions and comments should be directed to\par
its author, Steven J. Edwards (sje@world.std.com).\par
\par
13.2: pgnRead\par
\par
The program "pgnRead" runs under MS Windows 3.1 and provides an interactive\par
graphical user interface for scanning PGN data files.  This program includes a\par
colorful figurine chessboard display and scrolling controls for game and game\par
text selection.  It is available from the chess.uoknor.edu ftp site in the\par
pub/chess/DOS directory; several versions are available with names of the form\par
"pgnrd**.exe"; the latest at this writing is "PGNRD130.EXE".  Suggestions and\par
comments should be directed to its author, Keith Fuller (keithfx@aol.com).\par
\par
13.3: mail2pgn/GIICS\par
\par
The program "mail2pgn" produces a PGN version of chess game data generated by\par
the ICS (Internet Chess Server).  It can be found at the chess.uoknor.edu ftp\par
site in the pub/chess/DOS directory as the file "mail2pgn.zip"  A C language\par
version is in the directory pub/chess/Unix as the file "mail2pgn.c".\par
Suggestions and comments should be directed to its author, John Aronson\par
(aronson@helios.ece.arizona.edu).  This code has been reportedly incorporated\par
into the GIICS (Graphical Interface for the ICS); suggestions and comments\par
should be directed to its author, Tony Acero (ace3@midway.uchicago.edu).\par
\par
There is a report that mail2pgn has been superseded by the newer program\par
"MV2PGN" described below.\par
\par
13.4: XBoard\par
\par
"XBoard" is a comprehensive chess utility running under the X Window System\par
that provides a graphical user interface in a portable manner.  A new version\par
now handles PGN data.  It is available from the chess.uoknor.edu ftp site in\par
the pub/chess/X directory as the file "xboard-3.0.pl9.tar.gz".  Suggestions and\par
comments should be directed to its author, Tim Mann (mann@src.dec.com).\par
\par
13.5: cupgn\par
\par
The program "cupgn" converts game data stored in the ChessBase format into PGN.\par
It is available from the chess.uoknor.edu ftp site in the\par
pub/chess/Game-Databases/CBUFF directory as the file "cupgn.tar.gz".  Another\par
version is in the directory pub/chess/DOS as the file "cupgn120.exe".\par
Suggestions and comments should be directed to its author, Anjo Anjewierden\par
(anjo@swi.psy.uva.nl).\par
\par
13.6: Zarkov\par
\par
The current version (3.0) of the commercial chessplaying program "Zarkov" can\par
read and write games using PGN.  This program can also use the EPD standard for\par
communication with other EPD capable programs.  Historically, Zarkov is the\par
very first program to use EPD.  Suggestions and comments should be directed to\par
its author, John Stanback (jhs@icbdfcs1.fc.hp.com).\par
\par
A vendor for North America is:\par
\par
    International Chess Enterprises\par
    P.O. Box 19457\par
    Seattle, WA 98109\par
    USA\par
    (800) 262-4277\par
\par
A vendor for Europe is:\par
\par
    Gambit-Soft\par
    Feckenhauser Strasse 27\par
    D-78628 Rottweil\par
    GERMANY\par
    49-741-21573\par
\par
13.7: Chess Assistant\par
\par
The upcoming version of the multifunction commercial database program "Chess\par
Assistant" will be able to use the PGN standard as an import and export option.\par
There is a report of a freeware program, "PGN2CA", that will convert PGN\par
databases into Chess Assistant format.  For more information, the contact is\par
Victor Zakharov, one of the members of the Chess Assistant development team\par
(VICTOR@ldis.cs.msu.su).\par
\par
A vendor for North America is:\par
\par
    International Chess Enterprises\par
    P.O. Box 19457\par
    Seattle, WA 98109\par
    USA\par
    (800) 262-4277\par
\par
13.8: BOOKUP\par
\par
The MS-DOS edition of the multifunction commercial program BOOKUP, version 8.1,\par
is able to use the EPD standard for communication with other EPD capable\par
programs.  It may also be PGN capable as well.\par
\par
The BOOKUP 8.1.1 Addenda notes dated 1993.12.17 provide comprehensive\par
information on how to use EPD in conjunction with "analyst" programs such as\par
Zarkov and HIARCS.  Specifically, the search and evaluation abilities of an\par
analyst program are combined with the information organization abilities of the\par
BOOKUP database program to provide position scoring.  This is done by first\par
having BOOKUP export a database in EPD format, then having an analyst program\par
annotate each EPD record with a numeric score, and then having BOOKUP import\par
the changed EPD file.  BOOKUP can then apply minimaxing to the imported\par
database; this results in scores from terminal positions being propagated back\par
to earlier positions and even back to moves from the starting array.\par
\par
For some reason, BOOKUP calls this process "backsolving", but it's really just\par
standard minimaxing.  In any case, it's a good example of how different\par
programs from different authors performing different types of tasks can be\par
integrated by use of a common, non-proprietary standard.  This allows for a new\par
set of powerful features that are beyond the capabilities of any one of the\par
individual component programs.\par
\par
BOOKUP allows for some customizing of EPD actions.  One such customization is\par
to require the positional evaluations to follow the EPD standard; this means\par
that the score is always given from the viewpoint of the active player.  This\par
is explained more fully in the section on the "ce" (centipawn evaluation)\par
opcode in the EPD description in a later section of this document.  To ensure\par
that BOOKUP handles the centipawn evaluations in the "right" way, the EPD\par
setting "Positive for White" must be set to "N".  This makes BOOKUP work\par
correctly with Zarkov and with all other programs that use the "right"\par
centipawn evaluation convention.  There is an apparent problem with HIARCS that\par
requires this option to be set to "Y"; but this really means that, if true,\par
HIARCS needs to be adjusted to use the "right" centipawn evaluation convention.\par
\par
A vendor in North America is:\par
\par
    BOOKUP\par
    2763 Kensington Place West\par
    Columbus, OH 43202\par
    USA\par
    (800) 949-5445\par
    (614) 263-7219\par
\par
13.9: HIARCS\par
\par
The current version (2.1) of the commercial chessplaying program "HIARCS" is\par
able to use the EPD standard for communication with other EPD capable programs.\par
It may also be PGN capable as well.  More details will appear here as they\par
become available.\par
\par
A vendor in North America is:\par
\par
    HIARCS\par
    c/o BOOKUP\par
    2763 Kensington Place West\par
    Columbus, OH 43202\par
    USA\par
    (800) 949-5445\par
    (614) 263-7219\par
\par
13.10: Deja Vu\par
\par
The chess database "Deja Vu" from ChessWorks is a PGN compatible collection of\par
over 300,000 games.  It is available only on CD-ROM and is scheduled for\par
release in 1994.05 with periodic revisions thereafter.  The introductory price\par
is US$329.  For further information, the authors are John Crayton and Eric\par
Schiller and they can be contacted via e-mail (chesswks@netcom.com).\par
\par
13.11: MV2PGN\par
\par
The program "MV2PGN" can be used to convert game data generated by both current\par
and older versions of the GIICS (Graphical Interface - Internet Chess Server).\par
The program is included in the self extracting archive available from\par
chess.uoknor.edu in the directory pub/chess/DOS as the file "ics2pgn.exe".\par
Source code is also included.  This program is reported to supersede the older\par
"mail2pgn" and was needed due to a change in ICS recording format in late 1993.\par
For further information about MV2PGN, the contact person is Gary Bastin\par
(gbastin@x102a.ess.harris.com).\par
\par
13.12: The Hansen utilities (cb2pgn, nic2pgn, pgn2cb, pgn2nic)\par
\par
The Hansen utilities are used to convert among various chess data\par
representation formats.  The PGN related programs include: "cb2pgn.exe"\par
(convert ChessBase to PGN), "nic2pgn.exe" (convert NIC to PGN), "pgn2cb.exe"\par
(convert PGN to ChessBase), and "pgn2nic.exe" (convert PGN to NIC).\par
\par
The ChessBase related utilities (cb2pgn/pgn2cb) are found at chess.uoknor.edu\par
in the pub/chess/Game-Databases/ChessBase directory.\par
\par
The NIC related utilities (nic2pgn/pgn2nic) are found at chess.uoknor.edu in\par
the pub/chess/Game-Databases/NIC directory.\par
\par
For further information about the Hansen utilities, the contact person is the\par
author, Carsten Hansen (ch0506@hdc.hha.dk).\par
\par
13.13: Slappy the Database\par
\par
"Slappy the Database" is a commercial chess database and translation program\par
scheduled for release no sooner than late 1994.  It is a low cost utility with\par
a simple character interface intended for those who want a supported product\par
but who do not need (or cannot afford) a comprehensive, feature-laden program\par
with a graphical user interface.  Slappy's two most important features are its\par
batch processing ability and its full implementation of each and every standard\par
described in this document.  Versions of Slappy the Database will be provided\par
for various platforms including: Intel 386/486 Unix, Apple Macintosh, and\par
MS-DOS.\par
\par
Slappy may also be useful to those who have a full feature program who also\par
need to run time consuming chess database tasks on a spare computer.\par
\par
Suggestions and comments should be directed to its author, Steven J. Edwards\par
(sje@world.std.com).  More details will appear here as they become available.\par
\par
13.14: CBASCII\par
\par
"CBASCII" is a general utility for converting chess data between ChessBase\par
format and ASCII representations.  It has PGN capability, and it is available\par
from the chess.uoknor.edu ftp site in the pub/chess/DOS directory as the file\par
"cba1_2.zip".  The contact person is the program's author, Andy Duplain\par
(duplain@btcs.bt.co.uk).\par
\par
13.15: ZZZZZZ\par
\par
"ZZZZZZ" is a chessplaying program, complete with source, that also includes\par
some database functions.  A recent version is reported to have both PGN and EPD\par
capabilities.  It is available from the chess.uoknor.edu ftp site in the\par
pub/chess/Unix directory as the file "zzzzzz-3.2b1.tar.gz".  The contact person\par
is its author, Gijsbert Wiesenecker (wiesenecker@sara.nl).\par
\par
13.16: icsconv\par
\par
The program "icsconv" can be used to convert Internet Chess Server games, both\par
old and new format, to PGN.  It is available from the chess.uoknor.edu site in\par
the pub/chess/Game-Databases/PGN/Tools directory as the file "icsconv.exe".\par
The contact person is the author, Kevin Nomura (chow@netcom.com).\par
\par
13.17: CHESSOP (CHESSOPN/CHESSOPG)\par
\par
CHESSOP is an openings database and viewing tool with support for reading PGN\par
games.  It runs under MS-DOS and displays positions rather than games.  For\par
each position, both good and bad moves are listed with appropriate annotation.\par
Transpositions are handled as well.  The distributed database contains over\par
100,000 positions covering all the common openings.  Users can feed in their\par
own PGN data as well.  CHESSOP takes 3 Mbyte of hard disk, costs US$39 and can\par
be obtained from:\par
\par
    CHESSX Software\par
    12 Bluebell Close\par
    Glenmore Park\par
    AUSTRALIA 2745.\par
\par
The ideas behind CHESSOP can be seen in CHESSOPN (alias CHESSOPG), a free\par
version on the ICS server which has a reduced openings database (25,000\par
positions) and no PGN or transposition support but is otherwise the same as\par
CHESSOP.  (These are the files "chessopg.zip" in the directory pub/chess/DOS at\par
the chess.uoknor.edu ftp site.)\par
\par
13.18: CAT2PGN\par
\par
The program "CAT2PGN" is a utility that translates data from the format used by\par
Chess Assistant into PGN.  It is available from the chess.uoknor.edu ftp site.\par
The contact person for CAT2PGN is its author, David Myers\par
(myers@frodo.biochem.duke.edu).\par
\par
13.19: pgn2opg\par
\par
The utility "pgn2opg" can be used to convert PGN files into a text format used\par
by the "CHESSOPG" program mentioned above.  Although it does not perform any\par
semantic analysis on PGN input, it has been demonstrated to handle known\par
correct PGN input properly.  The file can be found in the pub/chess/PGN/Tools\par
directory at the chess.uoknor.edu ftp site.  For more information, the author\par
is David Barnes (djb@ukc.ac.uk).\par
\par
14: PGN data archives\par
\par
The primary PGN data archive repository is located at the ftp site\par
chess.uoknor.edu as the directory "pub/chess/Game-Databases/PGN".  It is\par
organized according to the description given in section C.5 of this document.\par
The European site ftp.math.uni-hamburg.de is also reported to carry a regularly\par
updated copy of the repository.\par
\par
15: International Olympic Committee country codes\par
\par
International Olympic Committee country codes are employed for Site nation\par
information because of their traditional use with the reporting of\par
international sporting events.  Due to changes in geography and linguistic\par
custom, some of the following may be incorrect or outdated.  Corrections and\par
extensions should be sent via e-mail to the PGN coordinator whose address\par
listed near the start of this document.\par
\par
AFG: Afghanistan\par
AIR: Aboard aircraft\par
ALB: Albania\par
ALG: Algeria\par
AND: Andorra\par
ANG: Angola\par
ANT: Antigua\par
ARG: Argentina\par
ARM: Armenia\par
ATA: Antarctica\par
AUS: Australia\par
AZB: Azerbaijan\par
BAN: Bangladesh\par
BAR: Bahrain\par
BHM: Bahamas\par
BEL: Belgium\par
BER: Bermuda\par
BIH: Bosnia and Herzegovina\par
BLA: Belarus\par
BLG: Bulgaria\par
BLZ: Belize\par
BOL: Bolivia\par
BRB: Barbados\par
BRS: Brazil\par
BRU: Brunei\par
BSW: Botswana\par
CAN: Canada\par
CHI: Chile\par
COL: Columbia\par
CRA: Costa Rica\par
CRO: Croatia\par
CSR: Czechoslovakia\par
CUB: Cuba\par
CYP: Cyprus\par
DEN: Denmark\par
DOM: Dominican Republic\par
ECU: Ecuador\par
EGY: Egypt\par
ENG: England\par
ESP: Spain\par
EST: Estonia\par
FAI: Faroe Islands\par
FIJ: Fiji\par
FIN: Finland\par
FRA: France\par
GAM: Gambia\par
GCI: Guernsey-Jersey\par
GEO: Georgia\par
GER: Germany\par
GHA: Ghana\par
GRC: Greece\par
GUA: Guatemala\par
GUY: Guyana\par
HAI: Haiti\par
HKG: Hong Kong\par
HON: Honduras\par
HUN: Hungary\par
IND: India\par
IRL: Ireland\par
IRN: Iran\par
IRQ: Iraq\par
ISD: Iceland\par
ISR: Israel\par
ITA: Italy\par
IVO: Ivory Coast\par
JAM: Jamaica\par
JAP: Japan\par
JRD: Jordan\par
JUG: Yugoslavia\par
KAZ: Kazakhstan\par
KEN: Kenya\par
KIR: Kyrgyzstan\par
KUW: Kuwait\par
LAT: Latvia\par
LEB: Lebanon\par
LIB: Libya\par
LIC: Liechtenstein\par
LTU: Lithuania\par
LUX: Luxembourg\par
MAL: Malaysia\par
MAU: Mauritania\par
MEX: Mexico\par
MLI: Mali\par
MLT: Malta\par
MNC: Monaco\par
MOL: Moldova\par
MON: Mongolia\par
MOZ: Mozambique\par
MRC: Morocco\par
MRT: Mauritius\par
MYN: Myanmar\par
NCG: Nicaragua\par
NET: The Internet\par
NIG: Nigeria\par
NLA: Netherlands Antilles\par
NLD: Netherlands\par
NOR: Norway\par
NZD: New Zealand\par
OST: Austria\par
PAK: Pakistan\par
PAL: Palestine\par
PAN: Panama\par
PAR: Paraguay\par
PER: Peru\par
PHI: Philippines\par
PNG: Papua New Guinea\par
POL: Poland\par
POR: Portugal\par
PRC: People's Republic of China\par
PRO: Puerto Rico\par
QTR: Qatar\par
RIN: Indonesia\par
ROM: Romania\par
RUS: Russia\par
SAF: South Africa\par
SAL: El Salvador\par
SCO: Scotland\par
SEA: At Sea\par
SEN: Senegal\par
SEY: Seychelles\par
SIP: Singapore\par
SLV: Slovenia\par
SMA: San Marino\par
SPC: Aboard spacecraft\par
SRI: Sri Lanka\par
SUD: Sudan\par
SUR: Surinam\par
SVE: Sweden\par
SWZ: Switzerland\par
SYR: Syria\par
TAI: Thailand\par
TMT: Turkmenistan\par
TRK: Turkey\par
TTO: Trinidad and Tobago\par
TUN: Tunisia\par
UAE: United Arab Emirates\par
UGA: Uganda\par
UKR: Ukraine\par
UNK: Unknown\par
URU: Uruguay\par
USA: United States of America\par
UZB: Uzbekistan\par
VEN: Venezuela\par
VGB: British Virgin Islands\par
VIE: Vietnam\par
VUS: U.S. Virgin Islands\par
WLS: Wales\par
YEM: Yemen\par
YUG: Yugoslavia\par
ZAM: Zambia\par
ZIM: Zimbabwe\par
ZRE: Zaire\par
\par
16: Additional chess data standards\par
\par
While PGN is used for game storage, there are other data representation\par
standards for other chess related purposes.  Two important standards are FEN\par
and EPD, both described in this section.\par
\par
16.1: FEN\par
\par
FEN is "Forsyth-Edwards Notation"; it is a standard for describing chess\par
positions using the ASCII character set.\par
\par
A single FEN record uses one text line of variable length composed of six data\par
fields.  The first four fields of the FEN specification are the same as the\par
first four fields of the EPD specification.\par
\par
A text file composed exclusively of FEN data records should have a file name\par
with the suffix ".fen".\par
\par
16.1.1: History\par
\par
FEN is based on a 19th century standard for position recording designed by the\par
Scotsman David Forsyth, a newspaper journalist.  The original Forsyth standard\par
has been slightly extended for use with chess software by Steven Edwards with\par
assistance from commentators on the Internet.  This new standard, FEN, was\par
first implemented in Edwards' SAN Kit.\par
\par
16.1.2: Uses for a position notation\par
\par
Having a standard position notation is particularly important for chess\par
programmers as it allows them to share position databases.  For example, there\par
exist standard position notation databases with many of the classical benchmark\par
tests for chessplaying programs, and by using a common position notation format\par
many hours of tedious data entry can be saved.  Additionally, a position\par
notation can be useful for page layout programs and for confirming position\par
status for e-mail competition.\par
\par
Many interesting chess problem sets represented using FEN can be found at the\par
chess.uoknor.edu ftp site in the directory pub/chess/SAN_testsuites.\par
\par
16.1.3: Data fields\par
\par
FEN specifies the piece placement, the active color, the castling availability,\par
the en passant target square, the halfmove clock, and the fullmove number.\par
These can all fit on a single text line in an easily read format.  The length\par
of a FEN position description varies somewhat according to the position. In\par
some cases, the description could be eighty or more characters in length and so\par
may not fit conveniently on some displays.  However, these positions aren't too\par
common.\par
\par
A FEN description has six fields.  Each field is composed only of non-blank\par
printing ASCII characters.  Adjacent fields are separated by a single ASCII\par
space character.\par
\par
16.1.3.1: Piece placement data\par
\par
The first field represents the placement of the pieces on the board.  The board\par
contents are specified starting with the eighth rank and ending with the first\par
rank.  For each rank, the squares are specified from file a to file h.  White\par
pieces are identified by uppercase SAN piece letters ("PNBRQK") and black\par
pieces are identified by lowercase SAN piece letters ("pnbrqk").  Empty squares\par
are represented by the digits one through eight; the digit used represents the\par
count of contiguous empty squares along a rank.  A solidus character "/" is\par
used to separate data of adjacent ranks.\par
\par
16.1.3.2: Active color\par
\par
The second field represents the active color.  A lower case "w" is used if\par
White is to move; a lower case "b" is used if Black is the active player.\par
\par
16.1.3.3: Castling availability\par
\par
The third field represents castling availability.  This indicates potential\par
future castling that may of may not be possible at the moment due to blocking\par
pieces or enemy attacks.  If there is no castling availability for either side,\par
the single character symbol "-" is used.  Otherwise, a combination of from one\par
to four characters are present.  If White has kingside castling availability,\par
the uppercase letter "K" appears.  If White has queenside castling\par
availability, the uppercase letter "Q" appears.  If Black has kingside castling\par
availability, the lowercase letter "k" appears.  If Black has queenside\par
castling availability, then the lowercase letter "q" appears.  Those letters\par
which appear will be ordered first uppercase before lowercase and second\par
kingside before queenside.  There is no white space between the letters.\par
\par
16.1.3.4: En passant target square\par
\par
The fourth field is the en passant target square.  If there is no en passant\par
target square then the single character symbol "-" appears.  If there is an en\par
passant target square then is represented by a lowercase file character\par
immediately followed by a rank digit.  Obviously, the rank digit will be "3"\par
following a white pawn double advance (Black is the active color) or else be\par
the digit "6" after a black pawn double advance (White being the active color).\par
\par
An en passant target square is given if and only if the last move was a pawn\par
advance of two squares.  Therefore, an en passant target square field may have\par
a square name even if there is no pawn of the opposing side that may\par
immediately execute the en passant capture.\par
\par
16.1.3.5: Halfmove clock\par
\par
The fifth field is a nonnegative integer representing the halfmove clock.  This\par
number is the count of halfmoves (or ply) since the last pawn advance or\par
capturing move.  This value is used for the fifty move draw rule.\par
\par
16.1.3.6: Fullmove number\par
\par
The sixth and last field is a positive integer that gives the fullmove number.\par
This will have the value "1" for the first move of a game for both White and\par
Black.  It is incremented by one immediately after each move by Black.\par
\par
16.1.4: Examples\par
\par
Here's the FEN for the starting position:\par
\par
rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\par
\par
And after the move 1. e4:\par
\par
rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\par
\par
And then after 1. ... c5:\par
\par
rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 2\par
\par
And then after 2. Nf3:\par
\par
rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2\par
\par
For two kings on their home squares and a white pawn on e2 (White to move) with\par
thirty eight full moves played with five halfmoves since the last pawn move or\par
capture:\par
\par
4k3/8/8/8/8/8/4P3/4K3 w - - 5 39\par
\par
16.2: EPD\par
\par
EPD is "Extended Position Description"; it is a standard for describing chess\par
positions along with an extended set of structured attribute values using the\par
ASCII character set.  It is intended for data and command interchange among\par
chessplaying programs.  It is also intended for the representation of portable\par
opening library repositories.\par
\par
A single EPD uses one text line of variable length composed of four data field\par
followed by zero or more operations.  The four fields of the EPD specification\par
are the same as the first four fields of the FEN specification.\par
\par
A text file composed exclusively of EPD data records should have a file name\par
with the suffix ".epd".\par
\par
16.2.1: History\par
\par
EPD is based in part on the earlier FEN standard; it has added extensions for\par
use with opening library preparation and also for general data and command\par
interchange among advanced chess programs.  EPD was developed by John Stanback\par
and Steven Edwards; its first implementation is in Stanback's master strength\par
chessplaying program Zarkov.\par
\par
16.2.2: Uses for an extended position notation\par
\par
Like FEN, EPD can also be used for general position description.  However,\par
unlike FEN, EPD is designed to be expandable by the addition of new operations\par
that provide new functionality as needs arise.\par
\par
Many interesting chess problem sets represented using EPD can be found at the\par
chess.uoknor.edu ftp site in the directory pub/chess/SAN_testsuites.\par
\par
16.2.3: Data fields\par
\par
EPD specifies the piece placement, the active color, the castling availability,\par
and the en passant target square of a position.  These can all fit on a single\par
text line in an easily read format.  The length of an EPD position description\par
varies somewhat according to the position and any associated operations. In\par
some cases, the description could be eighty or more characters in length and so\par
may not fit conveniently on some displays.  However, most EPD descriptions pass\par
among programs only and these are not usually seen by program users.\par
\par
(Note: due to the likelihood of future expansion of EPD, implementors are\par
encouraged to have their programs handle EPD text lines of up to 1024\par
characters long.)\par
\par
Each EPD data field is composed only of non-blank printing ASCII characters.\par
Adjacent data fields are separated by a single ASCII space character.\par
\par
16.2.3.1: Piece placement data\par
\par
The first field represents the placement of the pieces on the board.  The board\par
contents are specified starting with the eighth rank and ending with the first\par
rank.  For each rank, the squares are specified from file a to file h.  White\par
pieces are identified by uppercase SAN piece letters ("PNBRQK") and black\par
pieces are identified by lowercase SAN piece letters ("pnbrqk").  Empty squares\par
are represented by the digits one through eight; the digit used represents the\par
count of contiguous empty squares along a rank.  A solidus character "/" is\par
used to separate data of adjacent ranks.\par
\par
16.2.3.2: Active color\par
\par
The second field represents the active color.  A lower case "w" is used if\par
White is to move; a lower case "b" is used if Black is the active player.\par
\par
16.2.3.3: Castling availability\par
\par
The third field represents castling availability.  This indicates potential\par
future castling that may or may not be possible at the moment due to blocking\par
pieces or enemy attacks.  If there is no castling availability for either side,\par
the single character symbol "-" is used.  Otherwise, a combination of from one\par
to four characters are present.  If White has kingside castling availability,\par
the uppercase letter "K" appears.  If White has queenside castling\par
availability, the uppercase letter "Q" appears.  If Black has kingside castling\par
availability, the lowercase letter "k" appears.  If Black has queenside\par
castling availability, then the lowercase letter "q" appears.  Those letters\par
which appear will be ordered first uppercase before lowercase and second\par
kingside before queenside.  There is no white space between the letters.\par
\par
16.2.3.4: En passant target square\par
\par
The fourth field is the en passant target square.  If there is no en passant\par
target square then the single character symbol "-" appears.  If there is an en\par
passant target square then is represented by a lowercase file character\par
immediately followed by a rank digit.  Obviously, the rank digit will be "3"\par
following a white pawn double advance (Black is the active color) or else be\par
the digit "6" after a black pawn double advance (White being the active color).\par
\par
An en passant target square is given if and only if the last move was a pawn\par
advance of two squares.  Therefore, an en passant target square field may have\par
a square name even if there is no pawn of the opposing side that may\par
immediately execute the en passant capture.\par
\par
16.2.4: Operations\par
\par
An EPD operation is composed of an opcode followed by zero or more operands and\par
is concluded by a semicolon.\par
\par
Multiple operations are separated by a single space character.  If there is at\par
least one operation present in an EPD line, it is separated from the last\par
(fourth) data field by a single space character.\par
\par
16.2.4.1: General format\par
\par
An opcode is an identifier that starts with a letter character and may be\par
followed by up to fourteen more characters.  Each additional character may be a\par
letter or a digit or the underscore character.\par
\par
An operand is either a set of contiguous non-white space printing characters or\par
a string.  A string is a set of contiguous printing characters delimited by a\par
quote character at each end.  A string value must have less than 256 bytes of\par
data.\par
\par
If at least one operand is present in an operation, there is a single space\par
between the opcode and the first operand.  If more than one operand is present\par
in an operation, there is a single blank character between every two adjacent\par
operands.  If there are no operands, a semicolon character is appended to the\par
opcode to mark the end of the operation.  If any operands appear, the last\par
operand has an appended semicolon that marks the end of the operation.\par
\par
Any given opcode appears at most once per EPD record.  Multiple operations in a\par
single EPD record should appear in ASCII order of their opcode names\par
(mnemonics).  However, a program reading EPD records may allow for operations\par
not in ASCII order by opcode mnemonics; the semantics are the same in either\par
case.\par
\par
Some opcodes that allow for more than one operand may have special ordering\par
requirements for the operands.  For example, the "pv" (predicted variation)\par
opcode requires its operands (moves) to appear in the order in which they would\par
be played.  All other opcodes that allow for more than one operand should have\par
operands appearing in ASCII order.  An example of the latter set is the "bm"\par
(best move[s]) opcode; its operands are moves that are all immediately playable\par
from the current position.\par
\par
Some opcodes require one or more operands that are chess moves.  These moves\par
should be represented using SAN.  If a different representation is used, there\par
is no guarantee that the EPD will be read correctly during subsequent\par
processing.\par
\par
Some opcodes require one or more operands that are integers.  Some opcodes may\par
require that an integer operand must be within a given range; the details are\par
described in the opcode list given below.  A negative integer is formed with a\par
hyphen (minus sign) preceding the integer digit sequence.  An optional plus\par
sign may be used for indicating a non-negative value, but such use is not\par
required and is indeed discouraged.\par
\par
Some opcodes require one or more operands that are floating point numbers.\par
Some opcodes may require that a floating point operand must be within a given\par
range; the details are described in the opcode list given below.  A floating\par
point operand is constructed from an optional sign character ("+" or "-"), a\par
digit sequence (with at least one digit), a radix point (always "."), and a\par
final digit sequence (with at least one digit).\par
\par
16.2.4.2: Opcode mnemonics\par
\par
An opcode mnemonic used for archival storage and for interprogram communication\par
starts with a lower case letter and is composed of only lower case letters,\par
digits, and the underscore character (i.e., no upper case letters).  These\par
mnemonics will also all be at least two characters in length.\par
\par
Opcode mnemonics used only by a single program or an experimental suite of\par
programs should start with an upper case letter.  This is so they may be easily\par
distinguished should they be inadvertently be encountered by other programs.\par
When a such a "private" opcode be demonstrated to be widely useful, it should\par
be brought into the official list (appearing below) in a lower case form.\par
\par
If a given program does not recognize a particular opcode, that operation is\par
simply ignored; it is not signaled as an error.\par
\par
16.2.5: Opcode list\par
\par
The opcodes are listed here in ASCII order of their mnemonics.  Suggestions for\par
new opcodes should be sent to the PGN standard coordinator listed near the\par
start of this document.\par
\par
16.2.5.1: Opcode "acn": analysis count: nodes\par
\par
The opcode "acn" takes a single non-negative integer operand.  It is used to\par
represent the number of nodes examined in an analysis.  Note that the value may\par
be quite large for some extended searches and so use of (at least) a long (four\par
byte) representation is suggested.\par
\par
16.2.5.2: Opcode "acs": analysis count: seconds\par
\par
The opcode "acs" takes a single non-negative integer operand.  It is used to\par
represent the number of seconds used for an analysis.  Note that the value may\par
be quite large for some extended searches and so use of (at least) a long (four\par
byte) representation is suggested.\par
\par
16.2.5.3: Opcode "am": avoid move(s)\par
\par
The opcode "am" indicates a set of zero or more moves, all immediately playable\par
from the current position, that are to be avoided in the opinion of the EPD\par
writer.  Each operand is a SAN move; they appear in ASCII order.\par
\par
16.2.5.4: Opcode "bm": best move(s)\par
\par
The opcode "bm" indicates a set of zero or more moves, all immediately playable\par
from the current position, that are judged to the best available by the EPD\par
writer.  Each operand is a SAN move; they appear in ASCII order.\par
\par
16.2.5.5: Opcode "c0": comment (primary, also "c1" though "c9")\par
\par
The opcode "c0" (lower case letter "c", digit character zero) indicates a top\par
level comment that applies to the given position.  It is the first of ten\par
ranked comments, each of which has a mnemonic formed from the lower case letter\par
"c" followed by a single decimal digit.  Each of these opcodes takes either a\par
single string operand or no operand at all.\par
\par
This ten member comment family of opcodes is intended for use as descriptive\par
commentary for a complete game or game fragment.  The usual processing of these\par
opcodes are as follows:\par
\par
1) At the beginning of a game (or game fragment), a move sequence scanning\par
program initializes each element of its set of ten comment string registers to\par
be null.\par
\par
2) As the EPD record for each position in the game is processed, the comment\par
operations are interpreted from left to right.  (Actually, all operations in n\par
EPD record are interpreted from left to right.)  Because operations appear in\par
ASCII order according to their opcode mnemonics, opcode "c0" (if present) will\par
be handled prior to all other opcodes, then opcode "c1" (if present), and so\par
forth until opcode "c9" (if present).\par
\par
3) The processing of opcode "cN" (0 <= N <= 9) involves two steps.  First, all\par
comment string registers with an index equal to or greater than N are set to\par
null.  (This is the set "cN" though "c9".)  Second, and only if a string\par
operand is present, the value of the corresponding comment string register is\par
set equal to the string operand.\par
\par
16.2.5.6: Opcode "ce": centipawn evaluation\par
\par
The opcode "ce" indicates the evaluation of the indicated position in centipawn\par
units.  It takes a single operand, an optionally signed integer that gives an\par
evaluation of the position from the viewpoint of the active player; i.e., the\par
player with the move.  Positive values indicate a position favorable to the\par
moving player while negative values indicate a position favorable to the\par
passive player; i.e., the player without the move.  A centipawn evaluation\par
value close to zero indicates a neutral positional evaluation.\par
\par
Values are restricted to integers that are equal to or greater than -32767 and\par
are less than or equal to 32766.\par
\par
A value greater than 32000 indicates the availability of a forced mate to the\par
active player.  The number of plies until mate is given by subtracting the\par
evaluation from the value 32767.  Thus, a winning mate in N fullmoves is a mate\par
in ((2 * N) - 1) halfmoves (or ply) and has a corresponding centipawn\par
evaluation of (32767 - ((2 * N) - 1)).  For example, a mate on the move (mate\par
in one) has a centipawn evaluation of 32766 while a mate in five has a\par
centipawn evaluation of 32758.\par
\par
A value less than -32000 indicates the availability of a forced mate to the\par
passive player.  The number of plies until mate is given by subtracting the\par
evaluation from the value -32767 and then negating the result.  Thus, a losing\par
mate in N fullmoves is a mate in (2 * N) halfmoves (or ply) and has a\par
corresponding centipawn evaluation of (-32767 + (2 * N)).  For example, a mate\par
after the move (losing mate in one) has a centipawn evaluation of -32765 while\par
a losing mate in five has a centipawn evaluation of -32757.\par
\par
A value of -32767 indicates an illegal position.  A stalemate position has a\par
centipawn evaluation of zero as does a position drawn due to insufficient\par
mating material.  Any other position known to be a certain forced draw also has\par
a centipawn evaluation of zero.\par
\par
16.2.5.7: Opcode "dm": direct mate fullmove count\par
\par
The "dm" opcode is used to indicate the number of fullmoves until checkmate is\par
to be delivered by the active color for the indicated position.  It always\par
takes a single operand which is a positive integer giving the fullmove count.\par
For example, a position known to be a "mate in three" would have an operation\par
of "dm 3;" to indicate this.\par
\par
This opcode is intended for use with problem sets composed of positions\par
requiring direct mate answers as solutions.\par
\par
16.2.5.8: Opcode "draw_accept": accept a draw offer\par
\par
The opcode "draw_accept" is used to indicate that a draw offer made after the\par
move that lead to the indicated position is accepted by the active player.\par
This opcode takes no operands.\par
\par
16.2.5.9: Opcode "draw_claim": claim a draw\par
\par
The opcode "draw_claim" is used to indicate claim by the active player that a\par
draw exists.  The draw is claimed because of a third time repetition or because\par
of the fifty move rule or because of insufficient mating material.  A supplied\par
move (see the opcode "sm") is also required to appear as part of the same EPD\par
record.  The draw_claim opcode takes no operands.\par
\par
16.2.5.10: Opcode "draw_offer": offer a draw\par
\par
The opcode "draw_offer" is used to indicate that a draw is offered by the\par
active player.  A supplied move (see the opcode "sm") is also required to\par
appear as part of the same EPD record; this move is considered played from the\par
indicated position.  The draw_offer opcode takes no operands.\par
\par
16.2.5.11: Opcode "draw_reject": reject a draw offer\par
\par
The opcode "draw_reject" is used to indicate that a draw offer made after the\par
move that lead to the indicated position is rejected by the active player.\par
This opcode takes no operands.\par
\par
16.2.5.12: Opcode "eco": Encyclopedia of Chess Openings opening code\par
\par
The opcode "eco" is used to associate an opening designation from the\par
Encyclopedia of Chess Openings taxonomy with the indicated position.  The\par
opcode takes either a single string operand (the ECO opening name) or no\par
operand at all.  If an operand is present, its value is associated with an\par
"ECO" string register of the scanning program.  If there is no operand, the ECO\par
string register of the scanning program is set to null.\par
\par
The usage is similar to that of the "ECO" tag pair of the PGN standard.\par
\par
16.2.5.13: Opcode "fmvn": fullmove number\par
\par
The opcode "fmvn" represents the fullmove n umber associated with the position.\par
It always takes a single operand that is the positive integer value of the move\par
number.\par
\par
This opcode is used to explicitly represent the fullmove number in EPD that is\par
present by default in FEN as the sixth field.  Fullmove number information is\par
usually omitted from EPD because it does not affect move generation (commonly\par
needed for EPD-using tasks) but it does affect game notation (commonly needed\par
for FEN-using tasks).  Because of the desire for space optimization for large\par
EPD files, fullmove numbers were dropped from EPD's parent FEN.  The halfmove\par
clock information was similarly dropped.\par
\par
16.2.5.14: Opcode "hmvc": halfmove clock\par
\par
The opcode "hmvc" represents the halfmove clock associated with the position.\par
The halfmove clock of a position is equal to the number of plies since the last\par
pawn move or capture.  This information is used to implement the fifty move\par
draw rule.  It always takes a single operand that is the non-negative integer\par
value of the halfmove clock.\par
\par
This opcode is used to explicitly represent the halfmove clock in EPD that is\par
present by default in FEN as the fifth field.  Halfmove clock information is\par
usually omitted from EPD because it does not affect move generation (commonly\par
needed for EPD-using tasks) but it does affect game termination issues\par
(commonly needed for FEN-using tasks).  Because of the desire for space\par
optimization for large EPD files, halfmove clock values were dropped from EPD's\par
parent FEN.  The fullmove number information was similarly dropped.\par
\par
16.2.5.15: Opcode "id": position identification\par
\par
The opcode "id" is used to provide a simple identifying label for the indicated\par
position.  It takes a single string operand.\par
\par
This opcode is intended for use with test suites used for measuring\par
chessplaying program strength.  An example "id" operand for the seven hundred\par
fifty seventh position of the one thousand one problems in Reinfeld's _1001\par
Winning Chess Sacrifices and Combinations_ would be "WCSAC.0757" while the\par
fifteenth position in the twenty four problem Bratko-Kopec test suite would\par
have an "id" operand of "BK.15".\par
\par
16.2.5.16: Opcode "nic": New In Chess opening code\par
\par
The opcode "nic" is used to associate an opening designation from the _New In\par
Chess_ taxonomy with the indicated position.  The opcode takes either a single\par
string operand (the NIC opening name) or no operand at all.  If an operand is\par
present, its value is associated with an "NIC" string register of the scanning\par
program.  If there is no operand, the NIC string register of the scanning\par
program is set to null.\par
\par
The usage is similar to that of the "NIC" tag pair of the PGN standard.\par
\par
16.2.5.17: Opcode "noop": no operation\par
\par
The "noop" opcode is used to indicate no operation.  It takes zero or more\par
operands, each of which may be of any type.  The operation involves no\par
processing.  It is intended for use by developers for program testing purposes.\par
\par
16.2.5.18: Opcode "pm": predicted move\par
\par
The "pm" opcode is used to provide a single predicted move for the indicated\par
position.  It has exactly one operand, a move playable from the position.  This\par
move is judged by the EPD writer to represent the best move available to the\par
active player.\par
\par
If a non-empty "pv" (predicted variation) line of play is also present in the\par
same EPD record, the first move of the predicted variation is the same as the\par
predicted move.\par
\par
The "pm" opcode is intended for use as a general "display hint" mechanism.\par
\par
16.2.5.19: Opcode "pv": predicted variation\par
\par
The "pv" opcode is used to provide a predicted variation for the indicated\par
position.  It has zero or more operands which represent a sequence of moves\par
playable from the position.  This sequence is judged by the EPD writer to\par
represent the best play available.\par
\par
If a "pm" (predicted move) operation is also present in the same EPD record,\par
the predicted move is the same as the first move of the predicted variation.\par
\par
16.2.5.20: Opcode "rc": repetition count\par
\par
The "rc" opcode is used to indicate the number of occurrences of the indicated\par
position.  It takes a single, positive integer operand.  Any position,\par
including the initial starting position, is considered to have an "rc" value of\par
at least one.  A value of three indicates a candidate for a draw claim by the\par
position repetition rule.\par
\par
16.2.5.21: Opcode "resign": game resignation\par
\par
The opcode "resign" is used to indicate that the active player has resigned the\par
game.  This opcode takes no operands.\par
\par
16.2.5.22: Opcode "sm": supplied move\par
\par
The "sm" opcode is used to provide a single supplied move for the indicated\par
position.  It has exactly one operand, a move playable from the position.  This\par
move is the move to be played from the position.\par
\par
The "sm" opcode is intended for use to communicate the most recent played move\par
in an active game.  It is used to communicate moves between programs in\par
automatic play via a network.  This includes correspondence play using e-mail\par
and also programs acting as network front ends to human players.\par
\par
16.2.5.23: Opcode "tcgs": telecommunication: game selector\par
\par
The "tcgs" opcode is one of the telecommunication family of opcodes used for\par
games conducted via e-mail and similar means.  This opcode takes a single\par
operand that is a positive integer.  It is used to select among various games\par
in progress between the same sender and receiver.\par
\par
16.2.5.24: Opcode "tcri": telecommunication: receiver identification\par
\par
The "tcri" opcode is one of the telecommunication family of opcodes used for\par
games conducted via e-mail and similar means.  This opcode takes two order\par
dependent string operands.  The first operand is the e-mail address of the\par
receiver of the EPD record.  The second operand is the name of the player\par
(program or human) at the address who is the actual receiver of the EPD record.\par
\par
16.2.5.25: Opcode "tcsi": telecommunication: sender identification\par
\par
The "tcsi" opcode is one of the telecommunication family of opcodes used for\par
games conducted via e-mail and similar means.  This opcode takes two order\par
dependent string operands.  The first operand is the e-mail address of the\par
sender of the EPD record.  The second operand is the name of the player\par
(program or human) at the address who is the actual sender of the EPD record.\par
\par
16.2.5.26: Opcode "v0": variation name (primary, also "v1" though "v9")\par
\par
The opcode "v0" (lower case letter "v", digit character zero) indicates a top\par
level variation name that applies to the given position.  It is the first of\par
ten ranked variation names, each of which has a mnemonic formed from the lower\par
case letter "v" followed by a single decimal digit.  Each of these opcodes\par
takes either a single string operand or no operand at all.\par
\par
This ten member variation name family of opcodes is intended for use as\par
traditional variation names for a complete game or game fragment.  The usual\par
processing of these opcodes are as follows:\par
\par
1) At the beginning of a game (or game fragment), a move sequence scanning\par
program initializes each element of its set of ten variation name string\par
registers to be null.\par
\par
2) As the EPD record for each position in the game is processed, the variation\par
name operations are interpreted from left to right.  (Actually, all operations\par
in n EPD record are interpreted from left to right.)  Because operations appear\par
in ASCII order according to their opcode mnemonics, opcode "v0" (if present)\par
will be handled prior to all other opcodes, then opcode "v1" (if present), and\par
so forth until opcode "v9" (if present).\par
\par
3) The processing of opcode "vN" (0 <= N <= 9) involves two steps.  First, all\par
variation name string registers with an index equal to or greater than N are\par
set to null.  (This is the set "vN" though "v9".)  Second, and only if a string\par
operand is present, the value of the corresponding variation name string\par
register is set equal to the string operand.\par
\par
17: Alternative chesspiece identifier letters\par
\par
English language piece names are used to define the letter set for identifying\par
chesspieces in PGN movetext.  However, authors of programs which are used only\par
for local presentation or scanning of chess move data may find it convenient to\par
use piece letter codes common in their locales.  This is not a problem as long\par
as PGN data that resides in archival storage or that is exchanged among\par
programs still uses the SAN (English) piece letter codes: "PNBRQK".\par
\par
For the above authors only, a list of alternative piece letter codes are\par
provided:\par
\par
Language     Piece letters (pawn knight bishop rook queen king)\par
----------   --------------------------------------------------\par
Czech        P J S V D K\par
Danish       B S L T D K\par
Dutch        O P L T D K\par
English      P N B R Q K\par
Estonian     P R O V L K\par
Finnish      P R L T D K\par
French       P C F T D R\par
German       B S L T D K\par
Hungarian    G H F B V K\par
Icelandic    P R B H D K\par
Italian      P C A T D R\par
Norwegian    B S L T D K\par
Polish       P S G W H K\par
Portuguese   P C B T D R\par
Romanian     P C N T D R\par
Spanish      P C A T D R\par
Swedish      B S L T D K\par
\par
18: Formal syntax\par
\par
<PGN-database> ::= <PGN-game> <PGN-database>\par
                   <empty>\par
\par
<PGN-game> ::= <tag-section> <movetext-section>\par
\par
<tag-section> ::= <tag-pair> <tag-section>\par
                  <empty>\par
\par
<tag-pair> ::= [ <tag-name> <tag-value> ]\par
\par
<tag-name> ::= <identifier>\par
\par
<tag-value> ::= <string>\par
\par
<movetext-section> ::= <element-sequence> <game-termination>\par
\par
<element-sequence> ::= <element> <element-sequence>\par
                       <recursive-variation> <element-sequence>\par
                       <empty>\par
\par
<element> ::= <move-number-indication>\par
              <SAN-move>\par
              <numeric-annotation-glyph>\par
\par
<recursive-variation> ::= ( <element-sequence> )\par
\par
<game-termination> ::= 1-0\par
                       0-1\par
                       1/2-1/2\par
                       *\par
<empty> ::=\par
\par
19: Canonical chess position hash coding\par
\par
*** This section is under development.\par
\par
20: Binary representation (PGC)\par
\par
*** This section is under development.\par
\par
The binary coded version of PGN is PGC (PGN Game Coding).  PGC is a binary\par
representation standard of PGN data designed for the dual goals of storage\par
efficiency and program I/O.  A file containing PGC data should have a name with\par
a suffix of ".pgc".\par
\par
Unlike PGN text files that may have locale dependent representations for\par
newlines, PGC files have data that does not vary due to local processing\par
environment.  This means that PGC files may be transferred among systems using\par
general binary file methods.\par
\par
PGC files should be used only when the use of PGN is impractical due to time\par
and space resource constraints.  As the general level of processing\par
capabilities increases, the need for PGC over PGN will decrease.  Therefore,\par
implementors are encouraged not to use PGC as the default representation\par
because it is much more difficult (than PGN) to understand without proper\par
software.\par
\par
PGC data is composed of a sequence of PGC records.  Each record is composed of\par
a sequence of one or more bytes.  The first byte is the PGN record marker and\par
it specifies the interpretation of the remaining portion of the record.  This\par
remaining portion is composed of zero or more PGN record items.  Item types\par
include move sequences, move sets, and character strings.\par
\par
20.1: Bytes, words, and doublewords\par
\par
At the lowest level, PGC binary data is organized as bytes, words (two\par
contiguous bytes), and doublewords (four contiguous bytes).  All eight bits of\par
a byte are used.  Longwords (eight contiguous bytes) are not used.  Integer\par
values are stored using two's complement representation.  Integers may be\par
signed or unsigned depending on context.  Multibyte integers are stored in\par
low-endian format with the least significant byte appearing first.\par
\par
A one byte integer item is called "int-1".  A two byte integer item is called\par
"int-2".  A four byte integer item is called "int-4".\par
\par
Characters are stored as bytes using the ISO 8859/1 Latin-1 (ECMA-94) code set.\par
There is no provision for other characters sets or representations.\par
\par
20.2: Move ordinals\par
\par
A chess move is represented using a move ordinal.  This is a single unsigned\par
byte quantity with values from zero to 255.  A move ordinal is interpreted as\par
an index into the list of legal moves from the current position.  This list is\par
constructed by generating the legal moves from the current position, assigning\par
SAN ASCII strings to each move, and then sorting these strings in ascending\par
order.  Note that a seven bit ordinal, as used by some inferior representation\par
systems, is insufficient as there are some positions that have more than 128\par
moves available.\par
\par
Examples:  From the initial position, there are twenty moves.  Move ordinal 0\par
corresponds to the SAN move string "Na3"; move ordinal 1 corresponds to "Nc3",\par
move ordinal 4 corresponds to "a3", and move ordinal 19 corresponds to "h4".\par
\par
Moves can be organized into sequences and sets.  A move sequence is an ordered\par
list of moves that are played, one after another from first to last.  A move\par
set is a list of moves that are all playable from the current position.\par
\par
Move sequence data is represented using a length header followed by move\par
ordinal data.  The length header is an unsigned integer that may be a byte or a\par
word.  The integer gives the number, possibly zero, of following move ordinal\par
bytes.  Most move sequences can be represented using just a byte header; these\par
are called "mvseq-1" items.  Move sequence data using a word header are called\par
"mvseq-2" items.\par
\par
Move set data is represented using a length header followed by move ordinal\par
data.  The length header is an unsigned integer that is a byte.  The integer\par
gives the number, possibly zero, of following move ordinal bytes.  All move\par
sets are be represented using just a byte header; these are called "mvset-1"\par
items.  (Note the implied restriction that a move set can only have a maximum\par
of 255 of the possible 256 ordinals present at one time.)\par
\par
20.3: String data\par
\par
PGC string data is represented using a length header followed by bytes of\par
character data.  The length header is an unsigned integer that may be a byte, a\par
word, or a doubleword.  The integer gives the number, possibly zero, of\par
following character bytes.  Most strings can be represented using just a byte\par
header; these are called "string-1" items.  String data using a word header are\par
called "string-2" items and string data using a doubleword header are called\par
"string-4" items.  No special ASCII NUL termination byte is required for PGC\par
storage of a string as the length is explicitly given in the item header.\par
\par
20.4: Marker codes\par
\par
PGC marker codes are given in hexadecimal format.  PGC marker code zero (marker\par
0x00) is the "noop" marker and carries no meaning.  Each additional marker code\par
defined appears in its own subsection below.\par
\par
20.4.1: Marker 0x01: reduced export format single game\par
\par
Marker 0x01 is used to indicate a single complete game in reduced export\par
format.  This refers to a game that has only the Seven Tag Roster data, played\par
moves, and no annotations or comments.  This record type is used as an\par
alternative to the general game data begin/end record pairs described below.\par
The general marker pair (0x05/0x06) is used to help represent game data that\par
can't be adequately represented in reduced export format.  There are eight\par
items that follow marker 0x01 to form the "reduced export format single game"\par
record.  In order, these are:\par
\par
1) string-1 (Event tag value)\par
\par
2) string-1 (Site tag value)\par
\par
3) string-1 (Date tag value)\par
\par
4) string-1 (Round tag value)\par
\par
5) string-1 (White tag value)\par
\par
6) string-1 (Black tag value)\par
\par
7) string-1 (Result tag value)\par
\par
8) mvseq-2 (played moves)\par
\par
20.4.2: Marker 0x02: tag pair\par
\par
Marker 0x02 is used to indicate a single tag pair.  There are two items that\par
follow marker 0x02 to form the "tag pair" record; in order these are:\par
\par
1) string-1 (tag pair name)\par
\par
2) string-1 (tag pair value)\par
\par
20.4.3: Marker 0x03: short move sequence\par
\par
Marker 0x03 is used to indicate a short move sequence.  There is one item that\par
follows marker 0x03 to form the "short move sequence" record; this is:\par
\par
1) mvseq-1 (played moves)\par
\par
20.4.4: Marker 0x04: long move sequence\par
\par
Marker 0x04 is used to indicate a long move sequence.  There is one item that\par
follows marker 0x04 to form the "long move sequence" record; this is:\par
\par
1) mvseq-2 (played moves)\par
\par
20.4.5: Marker 0x05: general game data begin\par
\par
Marker 0x05 is used to indicate the beginning of data for a game.  It has no\par
associated items; it is a complete record by itself.  Instead, it marks the\par
beginning of PGC records used to describe a game.  All records up to the\par
corresponding "general game data end" record are considered to be part of the\par
same game.  (PGC record type 0x01, "reduced export format single game", is not\par
permitted to appear within a general game begin/end record pair.  The general\par
game construct is to be used as an alternative to record type 0x01 in those\par
cases where the latter is too restrictive to contain the data for a game.)\par
\par
20.4.6: Marker 0x06: general game data end\par
\par
Marker 0x06 is used to indicate the end of data for a game.  It has no\par
associated items; it is a complete record by itself.  Instead, it marks the end\par
of PGC records used to describe a game.  All records after the corresponding\par
(and earlier appearing) "general game data begin" record are considered to be\par
part of the same game.\par
\par
20.4.7: Marker 0x07: simple-nag\par
\par
Marker 0x07 is used to indicate the presence of a simple NAG (Numeric\par
Annotation Glyph).  This is an annotation marker that has only a short type\par
identification and no operands.  There is one item that follows marker 0x07 to\par
form the "simple-nag" record; this is:\par
\par
1) int-1 (unsigned NAG value, from 0 to 255)\par
\par
20.4.8: Marker 0x08: rav-begin\par
\par
Marker 0x08 is used to indicate the beginning of an RAV (Recursive Annotation\par
Variation).  It has no associated items; it is a complete record by itself.\par
Instead, it marks the beginning of PGC records used to describe a recursive\par
annotation.  It is considered an opening bracket for a later rav-end record;\par
the recursive annotation is completely described between the bracket pair.  The\par
rav-begin/data/rav-end structures can be nested.\par
\par
20.4.9: Marker 0x09: rav-end\par
\par
Marker 0x09 is used to indicate the end of an RAV (Recursive Annotation\par
Variation).  It has no associated items; it is a complete record by itself.\par
Instead, it marks the end of PGC records used to describe a recursive\par
annotation.  It is considered a closing bracket for an earlier rav-begin\par
record; the recursive annotation is completely described between the bracket\par
pair.  The rav-begin/data/rav-end structures can be nested.\par
\par
20.4.10: Marker 0x0a: escape-string\par
\par
Marker 0x0a is used to indicate the presence of an escape string.  This is a\par
string represented by the use of the percent sign ("%") escape mechanism in\par
PGN.  The data that is escaped is the sequence of characters immediately\par
follwoing the percent sign up to but not including the terminating newline.  As\par
is the case with the PGN percent sign escape, the use of a PGC escape-string\par
record is limited to use for non-archival data.  There is one item that follows\par
marker 0x0a to form the "escape-string" record; this is the string data being\par
escaped:\par
\par
1) string-2 (escaped string data)\par
\par
21: E-mail correspondence usage\par
\par
*** This section is under development.\par
\par
See also: pgn\par
}
 